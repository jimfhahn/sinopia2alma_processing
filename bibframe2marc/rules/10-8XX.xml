<?xml version='1.0'?>
<rules xmlns="http://www.loc.gov/bf2marc"
       xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
       xmlns:rdfs="http://www.w3.org/2000/01/rdf-schema#"
       xmlns:bf="http://id.loc.gov/ontologies/bibframe/"
       xmlns:bflc="http://id.loc.gov/ontologies/bflc/"
       xmlns:madsrdf="http://www.loc.gov/mads/rdf/v1#"
       xmlns:marc="http://www.loc.gov/MARC21/slim"
       xmlns:xsl="http://www.w3.org/1999/XSL/Transform">

  <!-- Series added entries -->
  <if test="$xslProcessor != 'libxslt'">
    <df tag="$vSeriesLookupTag" lang-xpath="rdfs:label" lang-prefer="transliterated">
      <context xpath="
      bf:Work/bf:hasSeries[contains(@rdf:resource, 'hubs')] |
      bf:Work/bf:hasSeries/bf:*[contains(@rdf:about, 'hubs') and not(bflc:marcKey)] |
      
      bf:Work/bflc:relationship/bflc:Relationship[bflc:relation[contains(@rdf:resource, 'hasSeries') or contains(bflc:Relation/@rdf:about, 'hasSeries')]]/bf:relatedTo[contains(@rdf:resource, 'hubs')] |
      bf:Work/bflc:relationship/bflc:Relationship[bflc:relation[contains(@rdf:resource, 'hasSeries') or contains(bflc:Relation/@rdf:about, 'hasSeries')]]/bf:relatedTo/bf:*[contains(@rdf:about, 'hubs') and not(bflc:marcKey)]
      ">
      
      <var name="relURI">
        <switch>
          <case test="contains(@rdf:resource,'id.loc.gov')"><transform><xsl:value-of select="@rdf:resource"/></transform></case>
          <case test="contains(@rdf:about,'id.loc.gov')"><transform><xsl:value-of select="@rdf:about"/></transform></case>
        </switch>
      </var>
      <var name="vRelResourcePreNS">
        <transform>
          <xsl:call-template name="tGetRelResource">
            <xsl:with-param name="pRelUri" select="$relURI"/>
            <xsl:with-param name="pContext" select="."/>
          </xsl:call-template>
        </transform>
      </var>
      <var name="vRelResource" xpath="exsl:node-set($vRelResourcePreNS)" />
      <var name="vSeriesLookupTag">
        <switch>
          <case test="$vRelResource//marc:record">
            <switch>
              <case test="$vRelResource//marc:datafield[@tag='100']">800</case>
              <case test="$vRelResource//marc:datafield[@tag='110']">810</case>
              <case test="$vRelResource//marc:datafield[@tag='111']">811</case>
              <case test="$vRelResource//marc:datafield[@tag='130']">830</case>
            </switch>
          </case>
        </switch>
      </var>
      <var name="vValidSubfields">
        <switch>
          <case test="$vSeriesLookupTag='800'">abcdgjq</case>
          <case test="$vSeriesLookupTag='810'">abcdgn</case>
          <case test="$vSeriesLookupTag='811'">acdegnq</case>
          <case test="$vSeriesLookupTag='830'">adfghklmnoprst</case>
        </switch>
      </var>
      <ind1 default=" ">
          <switch>
            <case test="$vSeriesLookupTag != '830'">
              <select xpath="$vRelResource//marc:datafield[starts-with(@tag, '1')]/@ind1" />
            </case>
          </switch>
        </ind1>
      <ind2 default=" ">
        <switch>
          <case test="$vSeriesLookupTag = '830'">
            <switch>
              <case test="$vRelResource//marc:datafield[starts-with(@tag, '1')]/@ind1 != '' and $vRelResource//marc:datafield[starts-with(@tag, '1')]/@ind1 != ' '">
                <select xpath="$vRelResource//marc:datafield[starts-with(@tag, '1')]/@ind1" />
              </case>
              <case test="default">0</case>
            </switch>
          </case>
        </switch>
      </ind2>
      <transform>
        <xsl:for-each select="$vRelResource//marc:datafield[starts-with(@tag, '1')]/marc:subfield[contains($vValidSubfields,@code)]">
          <marc:subfield>
            <xsl:attribute name="code"><xsl:value-of select="@code"/></xsl:attribute>
            <xsl:value-of select="."/>
          </marc:subfield>
        </xsl:for-each>
      </transform>
      <sf code="v" repeatable="false">
        <select xpath="../bf:seriesEnumeration"/>
      </sf>
      <sf code="x" repeatable="false">
        <select xpath="bf:identifiedBy/*[local-name()='Issn' or rdf:type/@rdf:resource='http://id.loc.gov/ontologies/bibframe/Issn']/rdf:value"/>
      </sf>
      <sf code="w">
        <select xpath="bf:identifiedBy/*[local-name()='Lccn' or rdf:type/@rdf:resource='http://id.loc.gov/ontologies/bibframe/Lccn']">
          <transform><xsl:value-of select="concat('(DLC)',rdf:value)"/></transform>
        </select>
      </sf>
      <sf code="0">
        <select xpath="$relURI"/>
      </sf>
    </context>
    </df>
  </if>
  
  <if test="$xslProcessor = 'libxslt'">
    <switch>
      <case test="
        bf:Work/bf:hasSeries[contains(@rdf:resource, 'hubs')] |
        bf:Work/bf:hasSeries/bf:*[contains(@rdf:about, 'hubs') and not(bflc:marcKey)] |
        bf:Work/bflc:relationship/bflc:Relationship[bflc:relation[contains(@rdf:resource, 'hasSeries') or contains(bflc:Relation/@rdf:about, 'hasSeries')]]/bf:relatedTo[contains(@rdf:resource, 'hubs')] |
        bf:Work/bflc:relationship/bflc:Relationship[bflc:relation[contains(@rdf:resource, 'hasSeries') or contains(bflc:Relation/@rdf:about, 'hasSeries')]]/bf:relatedTo/bf:*[contains(@rdf:about, 'hubs') and not(bflc:marcKey)]
        ">
        <transform>
          <xsl:message>Record <xsl:value-of select="$vRecordId"/>: Unprocessed relationship node(s)/Hub(s) <xsl:value-of select="name()"/>.  Repeatable target field 8XX.</xsl:message>
        </transform>
      </case>
    </switch>
  </if>
  
  <!-- When a marcKey is present. -->
  <df tag="$vSeriesMarcKeyTag" lang-xpath="rdfs:label" lang-prefer="transliterated">
    <context xpath="
      bf:Work/bf:hasSeries/bf:*[bflc:marcKey] |
      bf:Work/bflc:relationship/bflc:Relationship[bflc:relation[contains(@rdf:resource, 'hasSeries') or contains(bflc:Relation/@rdf:about, 'hasSeries')]]/bf:relatedTo/bf:*[bflc:marcKey]
      ">
      
      <var name="relURI">
        <switch>
          <case test="not(contains(@rdf:resource, 'REPLACE'))"><transform><xsl:value-of select="@rdf:resource"/></transform></case>
          <case test="not(contains(@rdf:about, 'REPLACE'))"><transform><xsl:value-of select="@rdf:about"/></transform></case>
        </switch>
      </var>
      <var name="vRelResourcePreNS">
        <transform>
          <xsl:call-template name="tGetRelResource">
            <xsl:with-param name="pRelUri" select="$relURI"/>
            <xsl:with-param name="pContext" select="."/>
          </xsl:call-template>
        </transform>
      </var>
      <var name="vRelResource" xpath="exsl:node-set($vRelResourcePreNS)" />
      <var name="vSeriesMarcKeyTag">
        <switch>
          <case test="$vRelResource//marc:record">
            <switch>
              <case test="$vRelResource//marc:datafield[@tag='100']">800</case>
              <case test="$vRelResource//marc:datafield[@tag='110']">810</case>
              <case test="$vRelResource//marc:datafield[@tag='111']">811</case>
              <case test="$vRelResource//marc:datafield[@tag='130']">830</case>
            </switch>
          </case>
        </switch>
      </var>
      <var name="vValidSubfields">
        <switch>
          <case test="$vSeriesMarcKeyTag='800'">abcdfghjklmnopqrstv</case>
          <case test="$vSeriesMarcKeyTag='810'">abcdfghklmnoprstv</case>
          <case test="$vSeriesMarcKeyTag='811'">acdefghklnpqstv</case>
          <case test="$vSeriesMarcKeyTag='830'">adfghklmnoprstv</case>
        </switch>
      </var>
      <ind1 default=" ">
        <switch>
          <case test="$vSeriesMarcKeyTag != '830'">
            <select xpath="$vRelResource//marc:datafield[starts-with(@tag, '1')]/@ind1" />
          </case>
        </switch>
      </ind1>
      <ind2 default=" ">
        <switch>
          <case test="$vSeriesMarcKeyTag = '830'">
            <switch>
              <case test="$vRelResource//marc:datafield[starts-with(@tag, '1')]/@ind1 != '' and $vRelResource//marc:datafield[starts-with(@tag, '1')]/@ind1 != ' '">
                <select xpath="$vRelResource//marc:datafield[starts-with(@tag, '1')]/@ind1" />
              </case>
              <case test="default">0</case>
            </switch>
          </case>
        </switch>
      </ind2>
      <transform>
        <xsl:for-each select="$vRelResource//marc:datafield[starts-with(@tag, '1')]/marc:subfield[contains($vValidSubfields,@code)]">
          <marc:subfield>
            <xsl:attribute name="code"><xsl:value-of select="@code"/></xsl:attribute>
            <xsl:call-template name="tChopPunct">
              <xsl:with-param name="pString" select="."/>
            </xsl:call-template>
          </marc:subfield>
        </xsl:for-each>
      </transform>
      <sf code="v" repeatable="false">
        <select xpath="../bf:seriesEnumeration"/>
      </sf>
      <sf code="x" repeatable="false">
        <select xpath="bf:identifiedBy/*[local-name()='Issn' or rdf:type/@rdf:resource='http://id.loc.gov/ontologies/bibframe/Issn']/rdf:value"/>
      </sf>
      <sf code="w">
        <select xpath="bf:identifiedBy/*[local-name()='Lccn' or rdf:type/@rdf:resource='http://id.loc.gov/ontologies/bibframe/Lccn']">
          <transform><xsl:value-of select="concat('(DLC)',rdf:value)"/></transform>
        </select>
      </sf>
      <switch>
        <case test="$relURI != ''">
          <sf code="0">
            <select xpath="$relURI"/>
          </sf>
        </case>
      </switch>
    </context>
  </df>

  <select xpath="
    bf:Work/bflc:relationship/bflc:Relationship[bflc:relation[contains(@rdf:resource, 'hasSeries') or contains(bflc:Relation/@rdf:about, 'hasSeries')]]/bf:relatedTo/bf:*[not(contains(@rdf:about, 'hubs')) and not(bflc:marcKey) and bf:title and not(contains(bf:status/@rdf:resource, 'mstatus/t')) and not(contains(bf:status/bf:Status/@rdf:about, '/mstatus/t'))] |
    //bf:Item/bflc:relationship/bflc:Relationship[bflc:relation[contains(@rdf:resource, 'hasSeries') or contains(bflc:Relation/@rdf:about, 'hasSeries')]]/bf:relatedTo/bf:*[not(contains(@rdf:about, 'hubs')) and not(bflc:marcKey) and bf:title and not(contains(bf:status/@rdf:resource, 'mstatus/t')) and not(contains(bf:status/bf:Status/@rdf:about, '/mstatus/t'))]">
    <var name="vScriptSubtag">
      <transform>
        <xsl:call-template name="tScriptCode">
          <xsl:with-param name="pXmlLang" select="rdfs:label/@xml:lang"/>
        </xsl:call-template>
      </transform>
    </var>
    <var name="vContribSourceUri">
      <switch>
        <case test="bf:contribution/*/bf:agent/*/bf:source/@rdf:resource"><transform><xsl:value-of select="bf:contribution/*/bf:agent/*/bf:source/@rdf:resource"/></transform></case>
        <case test="bf:contribution/*/bf:agent/*/bf:source/bf:Source/@rdf:about"><transform><xsl:value-of select="bf:contribution/*/bf:agent/*/bf:source/bf:Source/@rdf:about"/></transform></case>
      </switch>
    </var>
    <var name="vNameAuth">
      <!-- only look up id.loc.gov name authorities -->
      <switch>
        <case test="bf:contribution/*/bf:agent/*">
          <transform>
            <xsl:call-template name="tGetRelResource">
              <xsl:with-param name="pUri" select="bf:contribution/*/bf:agent/*/@rdf:about"/>
            </xsl:call-template>
          </transform>
        </case>
      </switch>
    </var>
    <var name="agentRelURI">
      <switch>
        <case test="not(contains(../bf:contribution/bf:*/bf:agent/@rdf:resource,'REPLACE'))"><transform><xsl:value-of select="../bf:contribution/bf:*/bf:agent/@rdf:resource"/></transform></case>
        <case test="not(contains(../bf:contribution/bf:*/bf:agent/*/@rdf:about,'REPLACE'))"><transform><xsl:value-of select="not(contains(../bf:contribution/bf:*/bf:agent/*/@rdf:about,'REPLACE'))"/></transform></case>
      </switch>
    </var>
    <var name="vRelResourcePreNS">
      <transform>
        <xsl:call-template name="tGetRelResource">
          <xsl:with-param name="pRelUri" select="$agentRelURI"/>
          <xsl:with-param name="pContext" select="../bf:contribution/bf:*/bf:agent/*[1]"/>
        </xsl:call-template>
      </transform>
    </var>
    <var name="vRelResource" xpath="exsl:node-set($vRelResourcePreNS)" />
    <switch>
      <case test="$vScriptSubtag='' or translate($vScriptSubtag,$upper,$lower)=translate($pCatScript,$upper,$lower)">
        <switch>
          <!-- 810 -->
          <case test="bf:contribution/*/bf:agent/*[
                      local-name()='CorporateName' or rdf:type[@rdf:resource='http://www.loc.gov/mads/rdf/v1#CorporateName'] or
                      local-name()='Organization' or rdf:type[@rdf:resource='http://id.loc.gov/ontologies/bibframe/Organization'] or
                      local-name()='Jurisdiction' or rdf:type[@rdf:resource='http://id.loc.gov/ontologies/bibframe/Jurisdiction']
                      ]">
            <df tag="810">
              <ind1 default="2">
                <switch>
                  <case test="$vRelResource//marc:datafield[@tag='110']">
                    <transform><xsl:value-of select="$vRelResource//marc:datafield[@tag='110']/@ind1"/></transform>
                  </case>
                  <case test="bf:contribution/*/bf:agent/*[local-name()='Jurisdiction' or rdf:type[@rdf:resource='http://id.loc.gov/ontologies/bibframe/Jurisdiction']]">1</case>
                </switch>
              </ind1>
              <ind2 default=" "/>
              <sf code="3" repeatable="false">
                <select xpath="bflc:appliesTo/bflc:AppliesTo/rdfs:label"/>
              </sf>

              <!-- name subfields -->
              <select xpath="bf:contribution/*/bf:agent/*">
                <switch>
                  <case test="$vRelResource//marc:datafield[@tag='110']">
                    <transform>
                      <xsl:for-each select="$vRelResource//marc:datafield[@tag='110']/marc:subfield[contains('abcdgn',@code)]">
                        <marc:subfield>
                          <xsl:attribute name="code"><xsl:value-of select="@code"/></xsl:attribute>
                          <xsl:value-of select="."/>
                        </marc:subfield>
                      </xsl:for-each>
                    </transform>
                  </case>
                  <case test="default">
                    <sf code="a" chopPunct="true" repeatable="false">
                      <switch>
                        <case test="madsrdf:elementList">
                          <select xpath="madsrdf:elementList/*[1]/madsrdf:elementValue"/>
                        </case>
                        <case test="madsrdf:authoritativeLabel"><select xpath="madsrdf:authoritativeLabel"/></case>
                        <case test="default"><select xpath="rdfs:label"/></case>
                      </switch>
                    </sf>
                    <sf code="b" chopPunct="true">
                      <select xpath="madsrdf:elementList/*[position() &gt; 1]/madsrdf:elementValue"/>
                    </sf>
                  </case>
                </switch>
                <sf code="e" chopPunct="true">
                  <select xpath="../../bf:role/*[rdfs:label or madsrdf:authoritativeLabel]">
                    <switch>
                      <case test="madsrdf:authoritativeLabel"><select xpath="madsrdf:authoritativeLabel"/></case>
                      <case test="default"><select xpath="rdfs:label"/></case>
                    </switch>
                  </select>
                </sf>
                <!-- nac $u -->
                <sf code="4">
                  <select xpath="../../bf:role/*[madsrdf:code or bf:code]">
                    <switch>
                      <case test="madsrdf:code">
                        <select xpath="madsrdf:code"/>
                      </case>
                      <case test="default"><select xpath="bf:code"/></case>
                    </switch>
                  </select>
                </sf>
                <sf code="4">
                  <select xpath="../../bf:role/bf:Role/@rdf:about|../../bf:role/@rdf:resource"/>
                </sf>
                <sf code="0"><select xpath="@rdf:about[not(contains(.,'example.org')) and not(contains(.,'REPLACE'))]"/></sf>
                <sf code="0">
                  <select xpath="bf:identifiedBy/bf:Identifier">
                    <transform>
                      <xsl:variable name="vIdType">
                        <xsl:call-template name="tChopPunct">
                          <xsl:with-param name="pString" select="bf:source/bf:Source/bf:code"/>
                        </xsl:call-template>
                      </xsl:variable>
                      <xsl:choose>
                        <xsl:when test="$vIdType != ''"><xsl:value-of select="concat('(',$vIdType,')',rdf:value)"/></xsl:when>
                        <xsl:otherwise><xsl:value-of select="rdf:value"/></xsl:otherwise>
                      </xsl:choose>
                    </transform>
                  </select>
                </sf>
              </select>

              <!-- title subfields -->
              <sf code="t" chopPunct="true" repeatable="false"><select xpath="bf:title/bf:Title/bf:mainTitle"/></sf>
              <sf code="d" chopPunct="true"><select xpath="bf:legalDate"/></sf>
              <sf code="f" chopPunct="true" repeatable="false"><select xpath="bf:originDate"/></sf>
              <sf code="m" chopPunct="true"><select xpath="bf:musicMedium/bf:MusicMedium/rdfs:label"/></sf>
              <sf code="n" chopPunct="true"><select xpath="bf:title/bf:Title[not(contains(rdf:type/@rdf:resource,'bibframe'))][1]/bf:partNumber"/></sf>
              <sf code="p" chopPunct="true"><select xpath="bf:title/bf:Title[not(contains(rdf:type/@rdf:resource,'bibframe'))][1]/bf:partName"/></sf>
              <sf code="r" chopPunct="true" repeatable="false"><select xpath="bf:musicKey"/></sf>
              <sf code="s" chopPunct="true"><select xpath="bf:version"/></sf>
              <sf code="v" repeatable="false">
                <select xpath="../../bf:seriesEnumeration"/>
              </sf>
              <sf code="x" repeatable="false">
                <select xpath="bf:identifiedBy/*[local-name()='Issn' or rdf:type/@rdf:resource='http://id.loc.gov/ontologies/bibframe/Issn']/rdf:value"/>
              </sf>
              <sf code="w">
                <select xpath="bf:identifiedBy/*[local-name()='Lccn' or rdf:type/@rdf:resource='http://id.loc.gov/ontologies/bibframe/Lccn']">
                  <transform><xsl:value-of select="concat('(DLC)',rdf:value)"/></transform>
                </select>
              </sf>
              <sf code="0"><select xpath="@rdf:about[not(contains(.,'example.org')) and not(contains(.,'REPLACE'))]"/></sf>
              <!-- can't distinguish between $0 and $w unless $w is an LCCN -->
              <sf code="0">
                <select xpath="bf:identifiedBy/bf:Identifier[not(contains(rdf:type,'bibframe'))]">
                  <transform>
                    <xsl:variable name="vIdType">
                      <xsl:call-template name="tChopPunct">
                        <xsl:with-param name="pString" select="bf:source/bf:Source/bf:code"/>
                      </xsl:call-template>
                    </xsl:variable>
                    <xsl:choose>
                      <xsl:when test="$vIdType != ''"><xsl:value-of select="concat('(',$vIdType,')',rdf:value)"/></xsl:when>
                      <xsl:otherwise><xsl:value-of select="rdf:value"/></xsl:otherwise>
                    </xsl:choose>
                  </transform>
                </select>
              </sf>
              <switch>
                <case test="$vContribSourceUri != '' or bf:source/bf:Source/bf:code or bf:source/bf:Source/rdfs:label or */madsrdf:componentList/*[1]/bf:source/bf:Source/bf:code">
                  <sf code="2">
                    <switch>
                      <case test="bf:source/bf:Source/bf:code"><transform><xsl:value-of select="bf:source/bf:Source/bf:code"/></transform></case>
                      <case test="$vContribSourceUri != ''">
                        <switch>
                          <case test="contains($vContribSourceUri,'id.loc.gov')">
                            <transform>
                              <xsl:call-template name="tUriCode">
                                <xsl:with-param name="pUri" select="$vContribSourceUri"/>
                              </xsl:call-template>
                            </transform>
                          </case>
                          <case test="default"><transform><xsl:value-of select="$vContribSourceUri"/></transform></case>
                        </switch>
                      </case>
                      <case test="*/madsrdf:componentList/*[1]/bf:source/bf:Source/bf:code">
                        <transform><xsl:value-of select="*/madsrdf:componentList/*[1]/bf:source/bf:Source/bf:code"/></transform>
                      </case>
                      <case test="default"><transform><xsl:value-of select="bf:source/bf:Source/rdfs:label"/></transform></case>
                    </switch>
                  </sf>
                </case>
              </switch>
              <sf code="5">
                <select xpath="bflc:applicableInstitution/*/bf:code"/>
              </sf>
            </df>
          </case>

          <!-- 811 -->
          <case test="bf:contribution/*/bf:agent/*[
                      local-name()='ConferenceName' or rdf:type[@rdf:resource='http://www.loc.gov/mads/rdf/v1#ConferenceName'] or
                      local-name()='Meeting' or rdf:type[@rdf:resource='http://id.loc.gov/ontologies/bibframe/Meeting']
                      ]">
            <df tag="811">
              <ind1 default="2">
                <switch>
                  <case test="$vRelResource//marc:datafield[@tag='111']">
                    <transform><xsl:value-of select="$vRelResource//marc:datafield[@tag='111']/@ind1"/></transform>
                  </case>
                </switch>
              </ind1>
              <ind2 default=" "/>
              <sf code="3" chopPunct="true" repeatable="false">
                <select xpath="bflc:appliesTo/bflc:AppliesTo/rdfs:label"/>
              </sf>

              <!-- name subfields -->
              <select xpath="bf:contribution/*/bf:agent/*">
                <switch>
                  <case test="$vRelResource//marc:datafield[@tag='111']">
                    <transform>
                      <xsl:for-each select="$vRelResource//marc:datafield[@tag='111']/marc:subfield[contains('acdegnq',@code)]">
                        <marc:subfield>
                          <xsl:attribute name="code"><xsl:value-of select="@code"/></xsl:attribute>
                          <xsl:value-of select="."/>
                        </marc:subfield>
                      </xsl:for-each>
                    </transform>
                  </case>
                  <case test="default">
                    <sf code="a" chopPunct="true" repeatable="false">
                      <switch>
                        <case test="madsrdf:elementList">
                          <select xpath="madsrdf:elementList/*[1]/madsrdf:elementValue"/>
                        </case>
                        <case test="madsrdf:authoritativeLabel"><select xpath="madsrdf:authoritativeLabel"/></case>
                        <case test="default"><select xpath="rdfs:label"/></case>
                      </switch>
                    </sf>
                    <sf code="c" chopPunct="true">
                      <select xpath="madsrdf:elementList/*[local-name()='GeographicElement' and position() &gt; 1]/madsrdf:elementValue"/>
                    </sf>
                    <sf code="q" chopPunct="true">
                      <select xpath="madsrdf:elementList/*[local-name()='NameElement' and position() &gt; 1]/madsrdf:elementValue"/>
                    </sf>
                  </case>
                </switch>
                <sf code="j" chopPunct="true">
                  <select xpath="../../bf:role/*[rdfs:label or madsrdf:authoritativeLabel]">
                    <switch>
                      <case test="madsrdf:authoritativeLabel"><select xpath="madsrdf:authoritativeLabel"/></case>
                      <case test="default"><select xpath="rdfs:label"/></case>
                    </switch>
                  </select>
                </sf>
                <!-- nac $u -->
                <sf code="4">
                  <select xpath="../../bf:role/*[madsrdf:code or bf:code]">
                    <switch>
                      <case test="madsrdf:code">
                        <select xpath="madsrdf:code"/>
                      </case>
                      <case test="default"><select xpath="bf:code"/></case>
                    </switch>
                  </select>
                </sf>
                <sf code="4">
                  <select xpath="../../bf:role/bf:Role/@rdf:about|../../bf:role/@rdf:resource"/>
                </sf>
                <sf code="0"><select xpath="@rdf:about[not(contains(.,'example.org')) and not(contains(.,'REPLACE'))]"/></sf>
                <sf code="0">
                  <select xpath="bf:identifiedBy/bf:Identifier">
                    <transform>
                      <xsl:variable name="vIdType">
                        <xsl:call-template name="tChopPunct">
                          <xsl:with-param name="pString" select="bf:source/bf:Source/bf:code"/>
                        </xsl:call-template>
                      </xsl:variable>
                      <xsl:choose>
                        <xsl:when test="$vIdType != ''"><xsl:value-of select="concat('(',$vIdType,')',rdf:value)"/></xsl:when>
                        <xsl:otherwise><xsl:value-of select="rdf:value"/></xsl:otherwise>
                      </xsl:choose>
                    </transform>
                  </select>
                </sf>
              </select>

              <!-- title subfields -->
              <sf code="t" chopPunct="true" repeatable="false"><select xpath="bf:title/bf:Title/bf:mainTitle"/></sf>
              <sf code="d" chopPunct="true"><select xpath="bf:legalDate"/></sf>
              <sf code="f" chopPunct="true" repeatable="false"><select xpath="bf:originDate"/></sf>
              <sf code="m" chopPunct="true"><select xpath="bf:musicMedium/bf:MusicMedium/rdfs:label"/></sf>
              <sf code="n" chopPunct="true"><select xpath="bf:title/bf:Title[not(contains(rdf:type/@rdf:resource,'bibframe'))][1]/bf:partNumber"/></sf>
              <sf code="p" chopPunct="true"><select xpath="bf:title/bf:Title[not(contains(rdf:type/@rdf:resource,'bibframe'))][1]/bf:partName"/></sf>
              <sf code="r" chopPunct="true" repeatable="false"><select xpath="bf:musicKey"/></sf>
              <sf code="s" chopPunct="true"><select xpath="bf:version"/></sf>
              <sf code="v" repeatable="false">
                <select xpath="../../bf:seriesEnumeration"/>
              </sf>
              <sf code="x" repeatable="false">
                <select xpath="bf:identifiedBy/*[local-name()='Issn' or rdf:type/@rdf:resource='http://id.loc.gov/ontologies/bibframe/Issn']/rdf:value"/>
              </sf>
              <sf code="w">
                <select xpath="bf:identifiedBy/*[local-name()='Lccn' or rdf:type/@rdf:resource='http://id.loc.gov/ontologies/bibframe/Lccn']">
                  <transform><xsl:value-of select="concat('(DLC)',rdf:value)"/></transform>
                </select>
              </sf>
              <sf code="0"><select xpath="@rdf:about[not(contains(.,'example.org')) and not(contains(.,'REPLACE'))]"/></sf>
              <!-- can't distinguish between $0 and $w unless $w is an LCCN -->
              <sf code="0">
                <select xpath="bf:identifiedBy/bf:Identifier[not(contains(rdf:type,'bibframe'))]">
                  <transform>
                    <xsl:variable name="vIdType">
                      <xsl:call-template name="tChopPunct">
                        <xsl:with-param name="pString" select="bf:source/bf:Source/bf:code"/>
                      </xsl:call-template>
                    </xsl:variable>
                    <xsl:choose>
                      <xsl:when test="$vIdType != ''"><xsl:value-of select="concat('(',$vIdType,')',rdf:value)"/></xsl:when>
                      <xsl:otherwise><xsl:value-of select="rdf:value"/></xsl:otherwise>
                    </xsl:choose>
                  </transform>
                </select>
              </sf>
              <switch>
                <case test="$vContribSourceUri != '' or bf:source/bf:Source/bf:code or bf:source/bf:Source/rdfs:label or */madsrdf:componentList/*[1]/bf:source/bf:Source/bf:code">
                  <sf code="2">
                    <switch>
                      <case test="bf:source/bf:Source/bf:code"><transform><xsl:value-of select="bf:source/bf:Source/bf:code"/></transform></case>
                      <case test="$vContribSourceUri != ''">
                        <switch>
                          <case test="contains($vContribSourceUri,'id.loc.gov')">
                            <transform>
                              <xsl:call-template name="tUriCode">
                                <xsl:with-param name="pUri" select="$vContribSourceUri"/>
                              </xsl:call-template>
                            </transform>
                          </case>
                          <case test="default"><transform><xsl:value-of select="$vContribSourceUri"/></transform></case>
                        </switch>
                      </case>
                      <case test="*/madsrdf:componentList/*[1]/bf:source/bf:Source/bf:code">
                        <transform><xsl:value-of select="*/madsrdf:componentList/*[1]/bf:source/bf:Source/bf:code"/></transform>
                      </case>
                      <case test="default"><transform><xsl:value-of select="bf:source/bf:Source/rdfs:label"/></transform></case>
                    </switch>
                  </sf>
                </case>
              </switch>
              <sf code="5">
                <select xpath="bflc:applicableInstitution/*/bf:code"/>
              </sf>
            </df>
          </case>

          <!-- all other hasSeries/Work/contribution/*/agent/* fallback to 800 -->
          <case test="bf:contribution/*/bf:agent/*">
            <df tag="800">
              <ind1 default="1">
                <switch>
                  <case test="$vRelResource//marc:datafield[@tag='100']">
                    <transform><xsl:value-of select="$vRelResource//marc:datafield[@tag='100']/@ind1"/></transform>
                  </case>
                  <case test="bf:contribution/*/bf:agent/*[local-name()='Family' or rdf:type[@rdf:resource='http://id.loc.gov/ontologies/bibframe/Family'] or local-name()='FamilyName' or rdf:type[@rdf:resource='http://www.loc.gov/mads/rdf/v1#FamilyName']]">3</case>
                </switch>
              </ind1>
              <ind2 default=" "/>
              <sf code="3" chopPunct="true" repeatable="false">
                <select xpath="bflc:appliesTo/bflc:AppliesTo/rdfs:label"/>
              </sf>

              <!-- name subfields -->
              <select xpath="bf:contribution/*/bf:agent/*">
                <switch>
                  <case test="$vRelResource//marc:datafield[@tag='100']">
                    <transform>
                      <xsl:for-each select="$vRelResource//marc:datafield[@tag='100']/marc:subfield[contains('abcdgjq',@code)]">
                        <marc:subfield>
                          <xsl:attribute name="code"><xsl:value-of select="@code"/></xsl:attribute>
                          <xsl:value-of select="."/>
                        </marc:subfield>
                      </xsl:for-each>
                    </transform>
                  </case>
                  <case test="default">
                    <sf code="a" chopPunct="true" repeatable="false">
                      <switch>
                        <case test="madsrdf:elementList/madsrdf:FullNameElement/madsrdf:elementValue">
                          <select xpath="madsrdf:elementList/madsrdf:FullNameElement/madsrdf:elementValue[1]"/>
                        </case>
                        <case test="madsrdf:authoritativeLabel"><select xpath="madsrdf:authoritativeLabel"/></case>
                        <case test="default"><select xpath="rdfs:label"/></case>
                      </switch>
                    </sf>
                    <sf code="c" chopPunct="true">
                      <select xpath="madsrdf:elementList/madsrdf:TermsOfAddressNameElement/madsrdf:elementValue"/>
                    </sf>
                    <sf code="d" chopPunct="true" repeatable="false">
                      <select xpath="madsrdf:elementList/madsrdf:DateNameElement/madsrdf:elementValue"/>
                    </sf>
                    <sf code="q" chopPunct="true" repeatable="false"><select xpath="madsrdf:fullerName/*/rdfs:label"/></sf>
                  </case>
                </switch>
                <sf code="e" chopPunct="true">
                  <select xpath="../../bf:role/*[rdfs:label or madsrdf:authoritativeLabel]">
                    <switch>
                      <case test="madsrdf:authoritativeLabel"><select xpath="madsrdf:authoritativeLabel"/></case>
                      <case test="default"><select xpath="rdfs:label"/></case>
                    </switch>
                  </select>
                </sf>
                <sf code="4">
                  <select xpath="../../bf:role/*[madsrdf:code or bf:code]">
                    <switch>
                      <case test="madsrdf:code">
                        <select xpath="madsrdf:code"/>
                      </case>
                      <case test="default"><select xpath="bf:code"/></case>
                    </switch>
                  </select>
                </sf>
                <sf code="4">
                  <select xpath="../../bf:role/bf:Role/@rdf:about|../../bf:role/@rdf:resource"/>
                </sf>
                <sf code="0"><select xpath="@rdf:about[not(contains(.,'example.org')) and not(contains(.,'REPLACE'))]"/></sf>
                <sf code="0">
                  <select xpath="bf:identifiedBy/bf:Identifier">
                    <transform>
                      <xsl:variable name="vIdType">
                        <xsl:call-template name="tChopPunct">
                          <xsl:with-param name="pString" select="bf:source/bf:Source/bf:code"/>
                        </xsl:call-template>
                      </xsl:variable>
                      <xsl:choose>
                        <xsl:when test="$vIdType != ''"><xsl:value-of select="concat('(',$vIdType,')',rdf:value)"/></xsl:when>
                        <xsl:otherwise><xsl:value-of select="rdf:value"/></xsl:otherwise>
                      </xsl:choose>
                    </transform>
                  </select>
                </sf>
              </select>

              <!-- title subfields -->
              <sf code="t" chopPunct="true" repeatable="false"><select xpath="bf:title/bf:Title/bf:mainTitle"/></sf>
              <sf code="f" chopPunct="true" repeatable="false"><select xpath="bf:originDate"/></sf>
              <sf code="m" chopPunct="true"><select xpath="bf:musicMedium/bf:MusicMedium/rdfs:label"/></sf>
              <sf code="n" chopPunct="true"><select xpath="bf:title/bf:Title[not(contains(rdf:type/@rdf:resource,'bibframe'))][1]/bf:partNumber"/></sf>
              <sf code="p" chopPunct="true"><select xpath="bf:title/bf:Title[not(contains(rdf:type/@rdf:resource,'bibframe'))][1]/bf:partName"/></sf>
              <sf code="r" chopPunct="true" repeatable="false"><select xpath="bf:musicKey"/></sf>
              <sf code="s" chopPunct="true"><select xpath="bf:version"/></sf>
              <sf code="v" repeatable="false">
                <select xpath="../../bf:seriesEnumeration"/>
              </sf>
              <sf code="x" repeatable="false">
                <select xpath="bf:identifiedBy/*[local-name()='Issn' or rdf:type/@rdf:resource='http://id.loc.gov/ontologies/bibframe/Issn']/rdf:value"/>
              </sf>
              <sf code="w">
                <select xpath="bf:identifiedBy/*[local-name()='Lccn' or rdf:type/@rdf:resource='http://id.loc.gov/ontologies/bibframe/Lccn']">
                  <transform><xsl:value-of select="concat('(DLC)',rdf:value)"/></transform>
                </select>
              </sf>
              <sf code="0"><select xpath="@rdf:about[not(contains(.,'example.org')) and not(contains(.,'REPLACE'))]"/></sf>
              <!-- can't distinguish between $0 and $w unless $w is an LCCN -->
              <sf code="0">
                <select xpath="bf:identifiedBy/bf:Identifier[not(contains(rdf:type,'bibframe'))]">
                  <transform>
                    <xsl:variable name="vIdType">
                      <xsl:call-template name="tChopPunct">
                        <xsl:with-param name="pString" select="bf:source/bf:Source/bf:code"/>
                      </xsl:call-template>
                    </xsl:variable>
                    <xsl:choose>
                      <xsl:when test="$vIdType != ''"><xsl:value-of select="concat('(',$vIdType,')',rdf:value)"/></xsl:when>
                      <xsl:otherwise><xsl:value-of select="rdf:value"/></xsl:otherwise>
                    </xsl:choose>
                  </transform>
                </select>
              </sf>
              <switch>
                <case test="$vContribSourceUri != '' or bf:source/bf:Source/bf:code or bf:source/bf:Source/rdfs:label or */madsrdf:componentList/*[1]/bf:source/bf:Source/bf:code">
                  <sf code="2">
                    <switch>
                      <case test="bf:source/bf:Source/bf:code"><transform><xsl:value-of select="bf:source/bf:Source/bf:code"/></transform></case>
                      <case test="$vContribSourceUri != ''">
                        <switch>
                          <case test="contains($vContribSourceUri,'id.loc.gov')">
                            <transform>
                              <xsl:call-template name="tUriCode">
                                <xsl:with-param name="pUri" select="$vContribSourceUri"/>
                              </xsl:call-template>
                            </transform>
                          </case>
                          <case test="default"><transform><xsl:value-of select="$vContribSourceUri"/></transform></case>
                        </switch>
                      </case>
                      <case test="*/madsrdf:componentList/*[1]/bf:source/bf:Source/bf:code">
                        <transform><xsl:value-of select="*/madsrdf:componentList/*[1]/bf:source/bf:Source/bf:code"/></transform>
                      </case>
                      <case test="default"><transform><xsl:value-of select="bf:source/bf:Source/rdfs:label"/></transform></case>
                    </switch>
                  </sf>
                </case>
              </switch>
              <sf code="5">
                <select xpath="bflc:applicableInstitution/*/bf:code"/>
              </sf>
              <!-- nac $7 -->
            </df>
          </case>

          <!-- if no bf:contribution, fall back to 830 -->
          <case test="default">
            <df tag="830">
              <!-- Except for 830-only fields, copied from 130 -->
              <ind1 default=" "/>
              <ind2 default="0">
                <switch>
                  <case test="bf:title/bf:Title/bflc:titleSortKey and (string-length(bflc:titleSortKey) &lt; string-length(bf:title/bf:Title/bf:mainTitle))">
                    <transform>
                      <xsl:value-of select="string-length(bf:title/bf:Title/bf:mainTitle) - string-length(bf:title/bf:Title/bflc:titleSortKey)"/>
                    </transform>
                  </case>
                </switch>
              </ind2>
              <sf code="3" chopPunct="true" repeatable="false">
                <select xpath="bflc:appliesTo/bflc:AppliesTo/rdfs:label"/>
              </sf>
              <sf code="a" chopPunct="true" repeatable="false"><select xpath="bf:title/bf:Title/bf:mainTitle"/></sf>
              <sf code="0"><select xpath="@rdf:about[not(contains(.,'example.org')) and not(contains(.,'REPLACE'))]"/></sf>
              <sf code="0">
                <select xpath="bf:identifiedBy/bf:Identifier">
                  <transform>
                    <xsl:variable name="vIdType">
                      <xsl:call-template name="tChopPunct">
                        <xsl:with-param name="pString" select="bf:source/bf:Source/bf:code"/>
                      </xsl:call-template>
                    </xsl:variable>
                    <xsl:choose>
                      <xsl:when test="$vIdType != ''"><xsl:value-of select="concat('(',$vIdType,')',rdf:value)"/></xsl:when>
                      <xsl:otherwise><xsl:value-of select="rdf:value"/></xsl:otherwise>
                    </xsl:choose>
                  </transform>
                </select>
              </sf>
              <sf code="d"><select xpath="bf:legalDate"/></sf>
              <sf code="f" repeatable="false"><select xpath="bf:originDate"/></sf>
              <sf code="m" chopPunct="true"><select xpath="bf:musicMedium/bf:MusicMedium/rdfs:label"/></sf>
              <sf code="n" chopPunct="true"><select xpath="bf:title/bf:Title/bf:partNumber"/></sf>
              <sf code="p" chopPunct="true"><select xpath="bf:title/bf:Title/bf:partName"/></sf>
              <switch>
                <case test="rdf:type/@rdf:resource='http://id.loc.gov/ontologies/bibframe/Arrangement'">
                  <sf code="o">arranged</sf>
                </case>
              </switch>
              <sf code="r" chopPunct="true"><select xpath="bf:musicKey"/></sf>
              <sf code="s" chopPunct="true"><select xpath="bf:version"/></sf>
              <sf code="x" repeatable="false">
                <select xpath="bf:identifiedBy/*[local-name()='Issn' or rdf:type/@rdf:resource='http://id.loc.gov/ontologies/bibframe/Issn']/rdf:value"/>
              </sf>
              <sf code="v" repeatable="false">
                <select xpath="../../bf:seriesEnumeration"/>
              </sf>
              <!-- can't distinguish between $0 and $w unless $w is an LCCN -->
              <sf code="w">
                <select xpath="bf:identifiedBy/*[local-name()='Lccn' or rdf:type/@rdf:resource='http://id.loc.gov/ontologies/bibframe/Lccn']">
                  <transform><xsl:value-of select="concat('(DLC)',rdf:value)"/></transform>
                </select>
              </sf>
              <sf code="2"><select xpath="bf:source/bf:Source/bf:code"/></sf>
              <sf code="5">
                <select xpath="bflc:applicableInstitution/*/bf:code"/>
              </sf>
            </df>
          </case>
        </switch>
      </case>
    </switch>
  </select>

  <df tag="856">
    <context xpath="bf:Instance[
                      (bf:media/@rdf:resource='http://id.loc.gov/vocabulary/mediaTypes/c' or bf:media/*/@rdf:about='http://id.loc.gov/vocabulary/mediaTypes/c') and 
                      bf:electronicLocator
                      ]">
      <var name="v856Uri"><transform><xsl:value-of select="bf:electronicLocator/@rdf:resource"/></transform></var>
      <ind1 default=" ">
        <switch>
          <case test="starts-with($v856Uri,'mailto')">0</case>
          <case test="starts-with($v856Uri,'ftp')">1</case>
          <case test="starts-with($v856Uri,'telnet') or starts-with($v856Uri,'ssh')">2</case>
          <case test="starts-with($v856Uri,'http')">4</case>
        </switch>
      </ind1>
      <ind2 default=" ">
        <switch>
          <case test="local-name()='SupplementaryContent'">2</case>
        </switch>
      </ind2>
      <switch>
        <case test="not(contains(bf:title/bf:Title/bf:mainTitle, 'resource]'))">
          <sf code="3"><select xpath="bf:title/bf:Title/bf:mainTitle" /></sf>
        </case>
      </switch>
      <sf code="u"><transform><xsl:value-of select="$v856Uri"/></transform></sf>
      <sf code="z" chopPunct="true">
        <select xpath="bf:note/bf:Note/rdfs:label"/>
      </sf>
    </context>
  </df>
  
  <!-- Old pattern.  Keeping for the sake of backwards compatibility. -->
  <df tag="856">
    <context xpath="bf:Work/bf:tableOfContents/bf:TableOfContents[not(rdfs:label) and rdf:value[@rdf:datatype='http://www.w3.org/2001/XMLSchema#anyURI']] |
                    bf:Instance/bf:supplementaryContent/bf:SupplementaryContent[rdf:value[@rdf:datatype='http://www.w3.org/2001/XMLSchema#anyURI']] |
                    //bf:Item/bf:electronicLocator/*[rdf:value[@rdf:datatype='http://www.w3.org/2001/XMLSchema#anyURI']]">
      <var name="v856Uri"><transform><xsl:value-of select="rdf:value[@rdf:datatype='http://www.w3.org/2001/XMLSchema#anyURI']"/></transform></var>
      <ind1 default=" ">
        <switch>
          <case test="starts-with($v856Uri,'mailto')">0</case>
          <case test="starts-with($v856Uri,'ftp')">1</case>
          <case test="starts-with($v856Uri,'telnet') or starts-with($v856Uri,'ssh')">2</case>
          <case test="starts-with($v856Uri,'http')">4</case>
        </switch>
      </ind1>
      <ind2 default=" ">
        <switch>
          <case test="local-name()='SupplementaryContent'">2</case>
        </switch>
      </ind2>
      <sf code="u"><transform><xsl:value-of select="$v856Uri"/></transform></sf>
      <sf code="z" chopPunct="true">
        <select xpath="bf:note/bf:Note/rdfs:label"/>
      </sf>
    </context>
  </df>
  
  <df tag="856">
    <context xpath="bf:Work/bf:tableOfContents[@rdf:resource] |
                    bf:Instance/bf:supplementaryContent/bf:SupplementaryContent[bf:electronicLocator/@rdf:resource] |
                    //bf:Item/bf:electronicLocator[@rdf:resource]">
      <var name="v856Uri"><transform><xsl:value-of select="@rdf:resource|bf:electronicLocator/@rdf:resource"/></transform></var>
      <ind1 default=" ">
        <switch>
          <case test="starts-with($v856Uri,'mailto')">0</case>
          <case test="starts-with($v856Uri,'ftp')">1</case>
          <case test="starts-with($v856Uri,'telnet') or starts-with($v856Uri,'ssh')">2</case>
          <case test="starts-with($v856Uri,'http')">4</case>
        </switch>
      </ind1>
      <ind2 default=" ">
        <switch>
          <case test="local-name()='SupplementaryContent'">2</case>
        </switch>
      </ind2>
      <sf code="3">
        <switch>
          <case test="local-name()='tableOfContents'">Table of contents</case>
        </switch>
      </sf>
      <sf code="u"><transform><xsl:value-of select="$v856Uri"/></transform></sf>
      <sf code="z" chopPunct="true">
        <select xpath="bf:note/bf:Note/rdfs:label"/>
      </sf>
    </context>
  </df>

  <!-- default 884 for all records -->
  <df tag="884">
    <ind1 default=" "/>
    <ind2 default=" "/>
    <sf code="a"><transform><xsl:value-of select="$vCurrentVersion"/> (<xsl:value-of select="$xslProcessor" />)</transform></sf>
    <switch>
      <case test="$pGenerationDatestamp">
        <sf code="g"><transform><xsl:value-of select="$pGenerationDatestamp"/></transform></sf>
      </case>
    </switch>
    <switch>
      <case test="$pSourceRecordId">
        <sf code="k"><transform><xsl:value-of select="$pSourceRecordId"/></transform></sf>
      </case>
    </switch>
    <switch>
      <case test="$pConversionAgency">
        <sf code="q"><transform><xsl:value-of select="$pConversionAgency"/></transform></sf>
      </case>
    </switch>
    <switch>
      <case test="$pGenerationUri">
        <sf code="u"><transform><xsl:value-of select="$pGenerationUri"/></transform></sf>
      </case>
    </switch>
  </df>

</rules>
