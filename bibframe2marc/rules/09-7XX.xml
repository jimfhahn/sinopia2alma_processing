<?xml version='1.0'?>
<rules xmlns="http://www.loc.gov/bf2marc"
       xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
       xmlns:rdfs="http://www.w3.org/2000/01/rdf-schema#"
       xmlns:bf="http://id.loc.gov/ontologies/bibframe/"
       xmlns:bflc="http://id.loc.gov/ontologies/bflc/"
       xmlns:madsrdf="http://www.loc.gov/mads/rdf/v1#"
       xmlns:marc="http://www.loc.gov/MARC21/slim"
       xmlns:xsl="http://www.w3.org/1999/XSL/Transform">

  <!-- added entries -->
  

  <!-- 
    This handles the pattern for what will become a Name added entry.
    It is predicated on a URI being referenced for the Name/Agent.
    It is predicated on there being no bflc:marcKey.
  -->
  <df tag="$vAddedEntryNameLookupTag" lang-xpath="rdfs:label" lang-prefer="transliterated">
    <context xpath="
      bf:Work/bf:contribution/*[not(local-name()='PrimaryContribution') and not(rdf:type[contains(@rdf:resource, '/PrimaryContribution')])]/bf:agent[contains(@rdf:resource, 'id.loc.gov/authorities/') or contains(@rdf:resource, 'id.loc.gov/rwo/')] |
      bf:Work/bf:contribution/*[not(local-name()='PrimaryContribution') and not(rdf:type[contains(@rdf:resource, '/PrimaryContribution')])]/bf:agent/bf:*[(contains(@rdf:about, 'id.loc.gov/authorities/') or contains(@rdf:about, 'id.loc.gov/rwo/')) and not(bflc:marcKey)] |
      bf:Work/bf:contribution/*[not(local-name()='PrimaryContribution') and not(rdf:type[contains(@rdf:resource, '/PrimaryContribution')])]/bf:agent/madsrdf:*[(contains(@rdf:about, 'id.loc.gov/authorities/') or contains(@rdf:about, 'id.loc.gov/rwo/')) and not(bflc:marcKey)] |
      bf:Instance/bf:contribution/*[not(local-name()='PrimaryContribution') and not(rdf:type[contains(@rdf:resource, '/PrimaryContribution')])]/bf:agent[contains(@rdf:resource, 'id.loc.gov/authorities/') or contains(@rdf:resource, 'id.loc.gov/rwo/')] |
      bf:Instance/bf:contribution/*[not(local-name()='PrimaryContribution') and not(rdf:type[contains(@rdf:resource, '/PrimaryContribution')])]/bf:agent/bf:*[(contains(@rdf:about, 'id.loc.gov/authorities/') or contains(@rdf:about, 'id.loc.gov/rwo/')) and not(bflc:marcKey)] |
      bf:Instance/bf:contribution/*[not(local-name()='PrimaryContribution') and not(rdf:type[contains(@rdf:resource, '/PrimaryContribution')])]/bf:agent/madsrdf:*[(contains(@rdf:about, 'id.loc.gov/authorities/') or contains(@rdf:about, 'id.loc.gov/rwo/')) and not(bflc:marcKey)] |
      //bf:Item/bf:contribution/*[not(local-name()='PrimaryContribution') and not(rdf:type[contains(@rdf:resource, '/PrimaryContribution')])]/bf:agent[contains(@rdf:resource, 'id.loc.gov/authorities/') or contains(@rdf:resource, 'id.loc.gov/rwo/')] |
      //bf:Item/bf:contribution/*[not(local-name()='PrimaryContribution') and not(rdf:type[contains(@rdf:resource, '/PrimaryContribution')])]/bf:agent/bf:*[(contains(@rdf:about, 'id.loc.gov/authorities/') or contains(@rdf:about, 'id.loc.gov/rwo/')) and not(bflc:marcKey)] |
      //bf:Item/bf:contribution/*[not(local-name()='PrimaryContribution') and not(rdf:type[contains(@rdf:resource, '/PrimaryContribution')])]/bf:agent/madsrdf:*[(contains(@rdf:about, 'id.loc.gov/authorities/') or contains(@rdf:about, 'id.loc.gov/rwo/')) and not(bflc:marcKey)]
      ">
      
      <var name="relURI">
        <switch>
          <case test="contains(@rdf:resource,'id.loc.gov')"><transform><xsl:value-of select="@rdf:resource"/></transform></case>
          <case test="contains(@rdf:about,'id.loc.gov')"><transform><xsl:value-of select="@rdf:about"/></transform></case>
        </switch>
      </var>
      <var name="vRelResourcePreNS">
        <transform>
          <xsl:call-template name="tGetRelResource">
            <xsl:with-param name="pRelUri" select="$relURI"/>
            <xsl:with-param name="pContext" select="."/>
          </xsl:call-template>
        </transform>
      </var>
      <var name="vRelResource" xpath="exsl:node-set($vRelResourcePreNS)" />
      <var name="vAddedEntryNameLookupTag">
        <switch>
          <case test="$vRelResource//marc:record">
            <switch>
              <case test="$vRelResource//marc:datafield[@tag='100']">700</case>
              <case test="$vRelResource//marc:datafield[@tag='110']">710</case>
              <case test="$vRelResource//marc:datafield[@tag='111']">711</case>
            </switch>
          </case>
        </switch>
      </var>
      <var name="vValidSubfields">
        <switch>
          <case test="$vAddedEntryNameLookupTag='700'">abcdgjq</case>
          <case test="$vAddedEntryNameLookupTag='710'">abcdgn</case>
          <case test="$vAddedEntryNameLookupTag='711'">acdegnq</case>
        </switch>
      </var>
      
      <ind1 default=" ">
        <select xpath="$vRelResource//marc:datafield[starts-with(@tag, '1')]/@ind1" />
      </ind1>
      <ind2 default=" "/>
      
      <switch>
        <case test="$vRelResource//marc:datafield[starts-with(@tag, '1')]">
          <transform>
            <xsl:for-each select="$vRelResource//marc:datafield[starts-with(@tag, '1')]/marc:subfield[contains($vValidSubfields,@code)]">
              <marc:subfield>
                <xsl:attribute name="code"><xsl:value-of select="@code"/></xsl:attribute>
                <xsl:value-of select="."/>
              </marc:subfield>
            </xsl:for-each>
          </transform>
        </case>
      </switch>

      <sf code="e">
        <select xpath="ancestor::node()/bf:role/bf:Role/rdfs:label|ancestor::node()/bf:role/bf:Role/madsrdf:authoritativeLabel" />
      </sf>
      <select xpath="ancestor::node()/bf:role/bf:Role[not(rdfs:label) and not(madsrdf:authoritativeLabel)]/@rdf:about | ancestor::node()/bf:role/@rdf:resource">
        <var name="vRelationURI">
          <switch>
            <case test="contains(.,'id.loc.gov/')"><transform><xsl:value-of select="."/></transform></case>
          </switch>
        </var>
        <var name="vRelationLabel">
          <switch>
            <case test="$vRelationURI != ''">
              <transform>
                <xsl:call-template name="tGetLabel">
                  <xsl:with-param name="pUri" select="$vRelationURI"/>
                </xsl:call-template>
              </transform>
            </case>
          </switch>
        </var>
        <sf code="e" xpath="translate($vRelationLabel, $upper, $lower)" />
      </select>
      
      <switch>
        <case test="ancestor::node()/bf:role/bf:Role/@rdf:about or ancestor::node()/bf:role/@rdf:resource">
          <sf code="4">
            <select xpath="ancestor::node()/bf:role/bf:Role/@rdf:about | ancestor::node()/bf:role/@rdf:resource" />
          </sf>
        </case>
        <case test="ancestor::node()/bf:role/bf:Role[bf:code or madsrdf:code]">
          <sf code="4">
            <select xpath="ancestor::node()/bf:role/bf:Role/*[local-name() = 'code']" />
          </sf>
        </case>
      </switch>
      
      
        <switch>
          <case test="not(contains($relURI,'example.org')) and not(contains($relURI,'REPLACE')) and not(contains($relURI,'rwo'))">
            <sf code="0">
              <transform><xsl:value-of select="$relURI" /></transform>
            </sf>
          </case>
        </switch>
        <switch>
          <case test="not(contains($relURI,'example.org')) and not(contains($relURI,'REPLACE')) and not(contains($relURI,'authorities'))">
            <sf code="1">
              <transform><xsl:value-of select="$relURI" /></transform>
            </sf>
          </case>
        </switch>
      
    </context>
  </df>

  <!-- This is for when there is a marcKey present. -->
  <df tag="$vAddedEntryNameMarcKeyTag" lang-xpath="rdfs:label" lang-prefer="transliterated">
    <context xpath="
      bf:Work/bf:contribution/*[not(local-name()='PrimaryContribution') and not(rdf:type[contains(@rdf:resource, '/PrimaryContribution')])]/bf:agent/*[bflc:marcKey or marc:record] |
      bf:Instance/bf:contribution/*[not(local-name()='PrimaryContribution') and not(rdf:type[contains(@rdf:resource, '/PrimaryContribution')])]/bf:agent/*[bflc:marcKey or marc:record] |
      //bf:Item/bf:contribution/*[not(local-name()='PrimaryContribution') and not(rdf:type[contains(@rdf:resource, '/PrimaryContribution')])]/bf:agent/*[bflc:marcKey or marc:record]
      ">
      
      <var name="relURI">
        <switch>
          <case test="contains(@rdf:about,'id.loc.gov')"><transform><xsl:value-of select="@rdf:about"/></transform></case>
        </switch>
      </var>
      <var name="vRelResourcePreNS">
        <transform>
          <xsl:call-template name="tGetRelResource">
            <xsl:with-param name="pRelUri" select="$relURI"/>
            <xsl:with-param name="pContext" select="."/>
          </xsl:call-template>
        </transform>
      </var>
      <var name="vRelResource" xpath="exsl:node-set($vRelResourcePreNS)" />
      <var name="vAddedEntryNameMarcKeyTag">
        <switch>
          <case test="$vRelResource//marc:record">
            <switch>
              <case test="$vRelResource//marc:datafield[@tag='100']">700</case>
              <case test="$vRelResource//marc:datafield[@tag='110']">710</case>
              <case test="$vRelResource//marc:datafield[@tag='111']">711</case>
            </switch>
          </case>
        </switch>
      </var>
      <var name="vValidSubfields">
        <switch>
          <case test="$vAddedEntryNameMarcKeyTag='700'">abcdgjq</case>
          <case test="$vAddedEntryNameMarcKeyTag='710'">abcdgn</case>
          <case test="$vAddedEntryNameMarcKeyTag='711'">acdegnq</case>
        </switch>
      </var>
      
      <ind1 default=" ">
        <select xpath="$vRelResource//marc:datafield[starts-with(@tag, '1')]/@ind1" />
      </ind1>
      <ind2 default=" "/>
      
      <switch>
        <case test="$vRelResource//marc:datafield[starts-with(@tag, '1')]">
          <transform>
            <xsl:for-each select="$vRelResource//marc:datafield[starts-with(@tag, '1')]/marc:subfield[contains($vValidSubfields,@code)]">
              <marc:subfield>
                <xsl:attribute name="code"><xsl:value-of select="@code"/></xsl:attribute>
                <xsl:value-of select="."/>
              </marc:subfield>
            </xsl:for-each>
          </transform>
        </case>
      </switch>
      
      <switch>
          <case test="ancestor::node()/bf:role/bf:Role[rdfs:label or madsrdf:authoritativeLabel]">
            <sf code="e">
                <var name="vRelationLabel" xpath="ancestor::node()/bf:role/bf:Role/rdfs:label|ancestor::node()/bf:role/bf:Role/madsrdf:authoritativeLabel" />
                <transform><xsl:value-of select="translate($vRelationLabel, $upper, $lower)" /></transform>
            </sf>  
          </case>
          <case test="ancestor::node()/bf:role/bf:Role[not(rdfs:label) and not(madsrdf:authoritativeLabel)]/@rdf:about or ancestor::node()/bf:role/@rdf:resource">
            <select xpath="ancestor::node()/bf:role/bf:Role[not(rdfs:label) and not(madsrdf:authoritativeLabel)]/@rdf:about | ancestor::node()/bf:role/@rdf:resource">
                <var name="vRelationURI">
                  <switch>
                    <case test="contains(.,'id.loc.gov/')"><transform><xsl:value-of select="."/></transform></case>
                  </switch>
                </var>
                <var name="vRelationLabel">
                  <switch>
                    <case test="$vRelationURI != ''">
                      <transform>
                        <xsl:call-template name="tGetLabel">
                          <xsl:with-param name="pUri" select="$vRelationURI"/>
                        </xsl:call-template>
                      </transform>
                    </case>
                  </switch>
                </var>
                <sf code="e" xpath="translate($vRelationLabel, $upper, $lower)" />
              </select>              
          </case>
      </switch>
      
      <switch>
        <case test="ancestor::node()/bf:role/bf:Role/@rdf:about or ancestor::node()/bf:role/@rdf:resource">
          <sf code="4">
            <select xpath="ancestor::node()/bf:role/bf:Role/@rdf:about | ancestor::node()/bf:role/@rdf:resource" />
          </sf>
        </case>
        <case test="ancestor::node()/bf:role/bf:Role[bf:code or madsrdf:code]">
          <sf code="4">
            <select xpath="ancestor::node()/bf:role/bf:Role/*[local-name() = 'code']" />
          </sf>
        </case>
      </switch>
      
      
      <switch>
        <case test="not(contains($relURI,'example.org')) and not(contains($relURI,'REPLACE')) and not(contains($relURI,'rwo'))">
          <sf code="0">
            <transform><xsl:value-of select="$relURI" /></transform>
          </sf>
        </case>
      </switch>
      <switch>
        <case test="not(contains($relURI,'example.org')) and not(contains($relURI,'REPLACE')) and not(contains($relURI,'authorities'))">
          <sf code="1">
            <transform><xsl:value-of select="$relURI" /></transform>
          </sf>
        </case>
      </switch>
      
    </context>
  </df>
  
  <!-- 
    This handles the relationship/Relationship pattern for what will 
    become a Name/Title or Title added entry.
    It is predicated on a Hub being referenced and there is no bflc:marcKey.
    It will only trigger if libxslt is not the processor.
  -->
  <if test="$xslProcessor != 'libxslt'">
    <df tag="$vAddRelationLookupTag" lang-xpath="rdfs:label" lang-prefer="transliterated">
      <context xpath="bf:Work/bflc:relationship/bflc:Relationship[bflc:relation[not(contains(@rdf:resource, 'hasSeries')) and not(contains(bflc:Relation/@rdf:about, 'hasSeries'))]]/bf:relatedTo[contains(@rdf:resource, 'hubs')] |
        bf:Work/bflc:relationship/bflc:Relationship[bflc:relation[not(contains(@rdf:resource, 'hasSeries')) and not(contains(bflc:Relation/@rdf:about, 'hasSeries'))]]/bf:relatedTo/bf:*[contains(@rdf:about, 'hubs') and not(bflc:marcKey)] |
        bf:Work/bf:relatedTo[contains(@rdf:resource, 'hubs')] |
        bf:Work/bf:relatedTo/bf:*[contains(@rdf:about, 'hubs') and not(bflc:marcKey)] |
        bf:Work/bf:hasPart[contains(@rdf:resource, 'hubs')] |
        bf:Work/bf:hasPart/bf:*[contains(@rdf:about, 'hubs') and not(bflc:marcKey)]
        ">
        
        <var name="relURI">
          <switch>
            <case test="contains(@rdf:resource,'id.loc.gov/resources/hubs')"><transform><xsl:value-of select="@rdf:resource"/></transform></case>
            <case test="contains(@rdf:about,'id.loc.gov/resources/hubs')"><transform><xsl:value-of select="@rdf:about"/></transform></case>
          </switch>
        </var>
        <var name="vRelResourcePreNS">
          <transform>
            <xsl:call-template name="tGetRelResource">
              <xsl:with-param name="pRelUri" select="$relURI"/>
              <xsl:with-param name="pContext" select="."/>
            </xsl:call-template>
          </transform>
        </var>
        <var name="vRelResource" xpath="exsl:node-set($vRelResourcePreNS)" />
        <var name="vAddRelationLookupTag">
          <switch>
            <case test="$vRelResource//marc:record">
              <switch>
                <case test="$vRelResource//marc:datafield[@tag='100']">700</case>
                <case test="$vRelResource//marc:datafield[@tag='110']">710</case>
                <case test="$vRelResource//marc:datafield[@tag='111']">711</case>
                <case test="$vRelResource//marc:datafield[@tag='130']">730</case>
                <case test="default">758</case>
              </switch>
            </case>
            <case test="default">758</case>
          </switch>
        </var>
        <var name="vValidSubfields">
          <switch>
            <case test="$vAddRelationLookupTag='700'">abcdfghjklmnopqrst</case>
            <case test="$vAddRelationLookupTag='710'">abcdfghklmnoprst</case>
            <case test="$vAddRelationLookupTag='711'">acdeghklnpqst</case>
            <case test="$vAddRelationLookupTag='730'">adfghklmnoprst</case>
          </switch>
        </var>
        
        <ind1 default=" ">
          <switch>
            <case test="$vAddRelationLookupTag = '730'">
              <switch>
                <case test="$vRelResource//marc:datafield[starts-with(@tag, '1')]/@ind1 != '' and $vRelResource//marc:datafield[starts-with(@tag, '1')]/@ind1 != ' '">
                  <select xpath="$vRelResource//marc:datafield[starts-with(@tag, '1')]/@ind1" />
                </case>
                <case test="default">0</case>
              </switch>
            </case>
            <case test="default">
              <select xpath="$vRelResource//marc:datafield[starts-with(@tag, '1')]/@ind1" />
            </case>
          </switch>
        </ind1>
        <ind2 default=" ">
          <switch>
            <case test="self::bf:hasPart or ancestor::bf:hasPart">2</case>
          </switch>
        </ind2>
        
        <select xpath="../bflc:relation/bflc:Relation[not(rdfs:label) and not(madsrdf:authoritativeLabel)]/@rdf:about | ../bflc:relation/@rdf:resource">
          <var name="vRelationURI">
            <switch>
              <case test="contains(.,'id.loc.gov/entities')"><transform><xsl:value-of select="."/></transform></case>
            </switch>
          </var>
          <var name="vRelationLabel">
            <switch>
              <case test="parent::node()/marc:record">
                <transform><xsl:copy-of select="parent::node()/marc:record"/></transform>
              </case>
              <case test="$vRelationURI != ''">
                <transform>
                  <xsl:call-template name="tGetLabel">
                    <xsl:with-param name="pUri" select="$vRelationURI"/>
                  </xsl:call-template>
                </transform>
              </case>
            </switch>
          </var>
          <sf code="i">
            <transform><xsl:value-of select="$vRelationLabel"/></transform>
          </sf>
        </select>
        <sf code="i">
          <select xpath="../bflc:relation/bflc:Relation/rdfs:label|../bflc:relation/bflc:Relation/madsrdf:authoritativeLabel" />
        </sf>
        <switch>
          <case test="$vRelResource//marc:datafield[starts-with(@tag, '1')]">
            <transform>
              <xsl:for-each select="$vRelResource//marc:datafield[starts-with(@tag, '1')]/marc:subfield[contains($vValidSubfields,@code)]">
                <marc:subfield>
                  <xsl:attribute name="code"><xsl:value-of select="@code"/></xsl:attribute>
                  <xsl:value-of select="."/>
                </marc:subfield>
              </xsl:for-each>
            </transform>
          </case>
        </switch>
        <switch>
          <case test="$vRelResource//marc:datafield[@tag = '240'] and $vAddRelationLookupTag != '730'">
            <transform>
              <xsl:for-each select="$vRelResource//marc:datafield[@tag = '240']/marc:subfield[contains('adfghklmnoprs',@code)]">
                <marc:subfield>
                  <xsl:choose>
                    <xsl:when test="@code = 'a'">
                      <xsl:attribute name="code">t</xsl:attribute>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:attribute name="code"><xsl:value-of select="@code"/></xsl:attribute>
                    </xsl:otherwise>
                  </xsl:choose>
                  <xsl:value-of select="."/>
                </marc:subfield>
              </xsl:for-each>
            </transform>
          </case>
        </switch>
        
        <switch>
          <case test="../../bflc:relation/bflc:Relation/@rdf:about or ../bflc:relation/@rdf:resource">
            <sf code="4">
              <select xpath="../../bflc:relation/bflc:Relation/@rdf:about | ../bflc:relation/@rdf:resource" />
            </sf>
          </case>
        </switch>
        
        <sf code="1">
          <switch>
            <case test="$relURI != ''">
              <transform><xsl:value-of select="$relURI"/></transform>
            </case>
          </switch>
        </sf>
        
      </context>
    </df>
  </if>
  
  <if test="$xslProcessor = 'libxslt'">
      <switch>
        <case test="bf:Work/bflc:relationship/bflc:Relationship[bflc:relation[not(contains(@rdf:resource, 'hasSeries'))]]/bf:relatedTo[contains(@rdf:resource, 'hubs')] |
                    bf:Work/bflc:relationship/bflc:Relationship[bflc:relation[not(contains(@rdf:resource, 'hasSeries'))]]/bf:relatedTo/bf:*[contains(@rdf:about, 'hubs') and not(bflc:marcKey)] |
                    bf:Work/bf:relatedTo[contains(@rdf:resource, 'hubs')] |
                    bf:Work/bf:relatedTo/bf:*[contains(@rdf:about, 'hubs') and not(bflc:marcKey)] |
                    bf:Work/bf:hasPart[contains(@rdf:resource, 'hubs')] |
                    bf:Work/bf:hasPart/bf:*[contains(@rdf:about, 'hubs') and not(bflc:marcKey)]
            ">
        <transform>
          <xsl:message>Record <xsl:value-of select="$vRecordId"/>: Unprocessed relationship node(s)/Hub(s) <xsl:value-of select="name()"/>.  Repeatable target field 7XX.</xsl:message>
        </transform>
        </case>
      </switch>
  </if>
  
  <!-- This handles the relationship/Relationship pattern when there is a marcKey present. -->
  <df tag="$vAddRelationMarcKeyTag" lang-xpath="rdfs:label" lang-prefer="transliterated">
    <context xpath="bf:Work/bflc:relationship/bflc:Relationship[bflc:relation[not(contains(@rdf:resource, 'hasSeries')) and not(contains(bflc:Relation/@rdf:about, 'hasSeries'))]]/bf:relatedTo/bf:*[bflc:marcKey or marc:record] |
                    bf:Work/bf:relatedTo/bf:*[bflc:marcKey or marc:record] |
                    bf:Work/bf:hasPart/bf:*[bflc:marcKey or marc:record]
            ">
      
      <var name="relURI">
        <switch>
          <case test="contains(@rdf:about,'id.loc.gov/resources/hubs')"><transform><xsl:value-of select="@rdf:about"/></transform></case>
        </switch>
      </var>
      <var name="vRelResourcePreNS">
        <transform>
          <xsl:call-template name="tGetRelResource">
            <xsl:with-param name="pRelUri" select="$relURI"/>
            <xsl:with-param name="pContext" select="."/>
          </xsl:call-template>
        </transform>
      </var>
      <var name="vRelResource" xpath="exsl:node-set($vRelResourcePreNS)" />
      <var name="vAddRelationMarcKeyTag">
        <switch>
          <case test="$vRelResource//marc:record">
            <switch>
              <case test="$vRelResource//marc:datafield[@tag='100']">700</case>
              <case test="$vRelResource//marc:datafield[@tag='110']">710</case>
              <case test="$vRelResource//marc:datafield[@tag='111']">711</case>
              <case test="$vRelResource//marc:datafield[@tag='130']">730</case>
            </switch>
          </case>
        </switch>
      </var>
      <var name="vValidSubfields">
        <switch>
          <case test="$vAddRelationMarcKeyTag='700'">abcdfghjklmnopqrst</case>
          <case test="$vAddRelationMarcKeyTag='710'">abcdfghklmnoprst</case>
          <case test="$vAddRelationMarcKeyTag='711'">acdeghklnpqst</case>
          <case test="$vAddRelationMarcKeyTag='730'">adfghklmnoprst</case>
        </switch>
      </var>
      
      <ind1 default=" ">
        <switch>
          <case test="$vAddRelationMarcKeyTag = '730'">
            <switch>
              <case test="$vRelResource//marc:datafield[starts-with(@tag, '1')]/@ind1 != '' and $vRelResource//marc:datafield[starts-with(@tag, '1')]/@ind1 != ' '">
                <select xpath="$vRelResource//marc:datafield[starts-with(@tag, '1')]/@ind1" />
              </case>
              <case test="default">0</case>
            </switch>
          </case>
          <case test="default">
            <select xpath="$vRelResource//marc:datafield[starts-with(@tag, '1')]/@ind1" />
          </case>
        </switch>
      </ind1>
      <ind2 default=" ">
        <switch>
          <case test="self::bf:hasPart or ancestor::bf:hasPart">2</case>
        </switch>
      </ind2>
      
      <select xpath="../bflc:relation/bflc:Relation[not(rdfs:label) and not(madsrdf:authoritativeLabel)]/@rdf:about | ../bflc:relation/@rdf:resource">
        <var name="vRelationURI">
          <switch>
            <case test="contains(.,'id.loc.gov/entities')"><transform><xsl:value-of select="."/></transform></case>
          </switch>
        </var>
        <var name="vRelationLabel">
          <switch>
            <case test="parent::node()/marc:record">
              <transform><xsl:copy-of select="parent::node()/marc:record"/></transform>
            </case>
            <case test="$vRelationURI != ''">
              <transform>
                <xsl:call-template name="tGetLabel">
                  <xsl:with-param name="pUri" select="$vRelationURI"/>
                </xsl:call-template>
              </transform>
            </case>
          </switch>
        </var>
        <sf code="i">
          <transform><xsl:value-of select="$vRelationLabel"/></transform>
        </sf>
      </select>
      <sf code="i">
        <select xpath="../bflc:relation/bflc:Relation/rdfs:label|../bflc:relation/bflc:Relation/madsrdf:authoritativeLabel" />
      </sf>
      <switch>
        <case test="$vRelResource//marc:datafield[starts-with(@tag, '1')]">
          <transform>
            <xsl:for-each select="$vRelResource//marc:datafield[starts-with(@tag, '1')]/marc:subfield[contains($vValidSubfields,@code)]">
              <marc:subfield>
                <xsl:attribute name="code"><xsl:value-of select="@code"/></xsl:attribute>
                <xsl:value-of select="."/>
              </marc:subfield>
            </xsl:for-each>
          </transform>
        </case>
      </switch>
      <switch>
        <case test="$vRelResource//marc:datafield[@tag = '240'] and $vAddRelationMarcKeyTag != '730'">
          <transform>
            <xsl:for-each select="$vRelResource//marc:datafield[@tag = '240']/marc:subfield[contains('adfghklmnoprs',@code)]">
              <marc:subfield>
                <xsl:choose>
                  <xsl:when test="@code = 'a'">
                    <xsl:attribute name="code">t</xsl:attribute>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:attribute name="code"><xsl:value-of select="@code"/></xsl:attribute>
                  </xsl:otherwise>
                </xsl:choose>
                <xsl:value-of select="."/>
              </marc:subfield>
            </xsl:for-each>
          </transform>
        </case>
      </switch>
      
      <switch>
        <case test="../../bflc:relation/bflc:Relation/@rdf:about or ../bflc:relation/@rdf:resource">
          <sf code="4">
            <select xpath="../../bflc:relation/bflc:Relation/@rdf:about | ../bflc:relation/@rdf:resource" />
          </sf>
        </case>
      </switch>
      
      <sf code="1">
        <switch>
          <case test="$relURI != ''">
            <transform><xsl:value-of select="$relURI"/></transform>
          </case>
        </switch>
      </sf>
      
    </context>
  </df>
  
  
  <!-- 
    This handles patterns for what will become a Name added entry or Name/Title, Title Entry.
    No URIs for Hubs or Agents.
  -->
  <df tag="$vAddEntryTag" lang-xpath="rdfs:label" lang-prefer="transliterated">
    <context xpath="bf:Work/bf:contribution/*[not(local-name()='PrimaryContribution') and not(rdf:type[contains(@rdf:resource, '/PrimaryContribution')])]/bf:agent/*[(not(contains(@rdf:about, 'id.loc.gov')) or contains(@rdf:about, 'REPLACE')) and not(bflc:marcKey)] |
                    bf:Work/bf:relatedTo/bf:*[(not(contains(@rdf:about, 'id.loc.gov')) or contains(@rdf:about, 'REPLACE')) and not(bflc:marcKey)]/bf:contribution/*/bf:agent/* |
                    bf:Work/bf:hasPart/bf:*[(not(contains(@rdf:about, 'id.loc.gov')) or contains(@rdf:about, 'REPLACE')) and not(bflc:marcKey)]/bf:contribution/*/bf:agent/* |
                    bf:Instance/bf:contribution/*[not(local-name()='PrimaryContribution') and not(rdf:type[contains(@rdf:resource, '/PrimaryContribution')])]/bf:agent/*[(not(contains(@rdf:about, 'id.loc.gov')) or contains(@rdf:about, 'REPLACE')) and not(bflc:marcKey)] |
                    //bf:Item/bf:contribution/*[not(local-name()='PrimaryContribution') and not(rdf:type[contains(@rdf:resource, '/PrimaryContribution')])]/bf:agent/*[(not(contains(@rdf:about, 'id.loc.gov')) or contains(@rdf:about, 'REPLACE')) and not(bflc:marcKey)] |
                    //bf:Item/bf:relatedTo/bf:*[(not(contains(@rdf:about, 'id.loc.gov')) or contains(@rdf:about, 'REPLACE')) and not(bflc:marcKey)]/bf:contribution/*/bf:agent/* |
                    //bf:Item/bf:hasPart/bf:*[(not(contains(@rdf:about, 'id.loc.gov')) or contains(@rdf:about, 'REPLACE')) and not(bflc:marcKey)]/bf:contribution/*/bf:agent/*">
      <var name="vNameAuthPreNS">
        <!-- only look up id.loc.gov name authorities -->
        <switch>
          <case test="bflc:marcKey">
            <transform>
              <xsl:call-template name="tGetRelResource">
                <xsl:with-param name="pUri" select="@rdf:about"/>
                <xsl:with-param name="pContext" select="."/>
              </xsl:call-template>
            </transform>
          </case>
        </switch>
      </var>
      <var name="vNameAuth" xpath="exsl:node-set($vNameAuthPreNS)" />
      <var name="vAddEntryTag">
        <switch>
          <case test="local-name()='Uncontrolled' or rdf:type[@rdf:resource='http://id.loc.gov/ontologies/bflc/Uncontrolled']">720</case>
          <case test="local-name()='PersonalName' or rdf:type[@rdf:resource='http://www.loc.gov/mads/rdf/v1#PersonalName'] or
                      local-name()='FamilyName' or rdf:type[@rdf:resource='http://www.loc.gov/mads/rdf/v1#FamilyName'] or
                      local-name()='Person' or rdf:type[@rdf:resource='http://id.loc.gov/ontologies/bibframe/Person'] or
                      local-name()='Family' or rdf:type[@rdf:resource='http://id.loc.gov/ontologies/bibframe/Family']">700</case>
          <case test="local-name()='CorporateName' or rdf:type[@rdf:resource='http://www.loc.gov/mads/rdf/v1#CorporateName'] or
                      local-name()='Organization' or rdf:type[@rdf:resource='http://id.loc.gov/ontologies/bibframe/Organization'] or
                      local-name()='Jurisdiction' or rdf:type[@rdf:resource='http://id.loc.gov/ontologies/bibframe/Jurisdiction']">710</case>
          <case test="local-name()='ConferenceName' or rdf:type[@rdf:resource='http://www.loc.gov/mads/rdf/v1#ConferenceName'] or
                      local-name()='Meeting' or rdf:type[@rdf:resource='http://id.loc.gov/ontologies/bibframe/Meeting']">711</case>
          <case test="default">720</case>
        </switch>
      </var>
      <var name="vNameAuthTag">
        <switch>
          <case test="$vAddEntryTag='710'">110</case>
          <case test="$vAddEntryTag='711'">111</case>
          <case test="default">100</case>
        </switch>
      </var>
      <var name="vAuthSubfields">
        <switch>
          <case test="$vNameAuthTag='100'">abcdgjq</case>
          <case test="$vNameAuthTag='110'">abcdgn</case>
          <case test="$vNameAuthTag='111'">acdegnq</case>
        </switch>
      </var>
      <var name="vSourceUri">
        <switch>
          <case test="bf:source/@rdf:resource"><transform><xsl:value-of select="bf:source/@rdf:resource"/></transform></case>
          <case test="bf:source/bf:Source/@rdf:about"><transform><xsl:value-of select="bf:source/bf:Source/@rdf:about"/></transform></case>
        </switch>
      </var>
      <var name="vWorkUri">
        <transform><xsl:value-of select="../../../../@rdf:about"/></transform>
      </var>
      
      <var name="vTitleResourcePreNS">
        <!-- only look up id.loc.gov name authorities -->
        <switch>
          <case test="../../../../bf:title/bf:Title/bflc:marcKey">
            <transform>
              <xsl:call-template name="tGetRelResource">
                <xsl:with-param name="pUri" select="@rdf:about"/>
                <xsl:with-param name="pContext" select="../../../../bf:title/bf:Title"/>
              </xsl:call-template>
            </transform>
          </case>
        </switch>
      </var>
      <var name="vTitleResource" xpath="exsl:node-set($vTitleResourcePreNS)" />
      <var name="vTitleTag">
        <switch>
          <case test="$vAddEntryTag='710'">110</case>
          <case test="$vAddEntryTag='711'">111</case>
          <case test="default">100</case>
        </switch>
      </var>
      <var name="vTitleSubfields">
        <switch>
          <case test="$vTitleTag='100'">fhklmnoprst</case>
          <case test="$vTitleTag='110'">fhklmnoprst</case>
          <case test="$vTitleTag='111'">fhklnpst</case>
        </switch>
      </var>
      
      <ind1 default="2">
        <switch>
          <case test="exsl:node-set($vNameAuth)//marc:datafield[@tag=$vNameAuthTag]">
            <transform><xsl:value-of select="exsl:node-set($vNameAuth)//marc:datafield[@tag=$vNameAuthTag]/@ind1"/></transform>
          </case>
          <case test="$vAddEntryTag='700'">
            <switch>
              <case test="contains(local-name(),'Family')">3</case>
              <case test="default">1</case>
            </switch>
          </case>
          <case test="$vAddEntryTag='710'">
            <switch>
              <case test="local-name()='Jurisdiction' or rdf:type[@rdf:resource='http://id.loc.gov/ontologies/bibframe/Jurisdiction']">1</case>
            </switch>
          </case>
          <case test="$vAddEntryTag='720'">
            <switch>
              <case test="local-name()='Person' or rdf:type[@rdf:resource='http://id.loc.gov/ontologies/bibframe/Person']">1</case>
              <case test="default"><text> </text></case>
            </switch>
          </case>
        </switch>
      </ind1>
      <ind2 default=" ">
        <switch>
          <case test="ancestor::bf:hasPart">2</case>
        </switch>
      </ind2>
      <switch>
        <case test="$vAddEntryTag='720'">
          <!-- 720 created if class of added entry doesn't match...it's a much more sparse field, some data may be lost -->
          <sf code="a" chopPunct="true" repeatable="false">
            <select xpath="rdfs:label"/>
          </sf>
          <sf code="e" chopPunct="true">
            <select xpath="../../bf:role/*[rdfs:label or madsrdf:authoritativeLabel]">
              <switch>
                <case test="madsrdf:authoritativeLabel"><select xpath="madsrdf:authoritativeLabel"/></case>
                <case test="default"><select xpath="rdfs:label"/></case>
              </switch>
            </select>
          </sf>
          <sf code="4">
            <select xpath="../../bf:role/*[madsrdf:code or bf:code]">
              <switch>
                <case test="madsrdf:code">
                  <select xpath="madsrdf:code"/>
                </case>
                <case test="default"><select xpath="bf:code"/></case>
              </switch>
            </select>
          </sf>
          <sf code="4">
            <select xpath="../../bf:role/bf:Role/@rdf:about|../../bf:role/@rdf:resource"/>
          </sf>
        </case>
        <case test="default">
          <sf code="3" chopPunct="true" repeatable="false">
            <select xpath="bflc:appliesTo/bflc:AppliesTo/rdfs:label|../../../../bflc:appliesTo/bflc:AppliesTo/rdfs:label"/>
          </sf>
          <!-- seem to have to hack this to get a match on @rdf:about attribute? -->
          <transform>
            <xsl:for-each select="../../../../../../bflc:relationship/bflc:Relationship[bf:relatedTo/@rdf:resource=$vWorkUri]/bflc:relation/bflc:Relation/rdfs:label">
              <marc:subfield code="i">
                <xsl:call-template name="tChopPunct">
                  <xsl:with-param name="pString" select="."/>
                </xsl:call-template>
              </marc:subfield>
            </xsl:for-each>
          </transform>

          <!-- name subfields -->
          <switch>
            <case test="exsl:node-set($vNameAuth)//marc:datafield[@tag=$vNameAuthTag]">
              <transform>
                <xsl:for-each select="exsl:node-set($vNameAuth)//marc:datafield[@tag=$vNameAuthTag]/marc:subfield[contains($vAuthSubfields,@code)]">
                  <marc:subfield>
                    <xsl:attribute name="code"><xsl:value-of select="@code"/></xsl:attribute>
                    <xsl:value-of select="."/>
                  </marc:subfield>
                </xsl:for-each>
              </transform>
            </case>
            <case test="default">
              <sf code="a" chopPunct="true" repeatable="false">
                <switch>
                  <case test="madsrdf:elementList">
                    <select xpath="madsrdf:elementList/*[1]/madsrdf:elementValue"/>
                  </case>
                  <case test="madsrdf:authoritativeLabel"><select xpath="madsrdf:authoritativeLabel"/></case>
                  <case test="default"><select xpath="rdfs:label"/></case>
                </switch>
              </sf>
              <switch>
                <case test="$vAddEntryTag='710'">
                  <sf code="b" chopPunct="true">
                    <select xpath="madsrdf:elementList/*[position() &gt; 1]/madsrdf:elementValue"/>
                  </sf>
                </case>
              </switch>
              <switch>
                <case test="$vAddEntryTag='700'">
                  <sf code="c" chopPunct="true">
                    <select xpath="madsrdf:elementList/madsrdf:TermsOfAddressNameElement/madsrdf:elementValue"/>
                  </sf>
                </case>
              </switch>
              <switch>
                <case test="$vAddEntryTag='711'">
                  <sf code="c" chopPunct="true">
                    <select xpath="madsrdf:elementList/*[local-name()='GeographicElement' and position() &gt; 1]/madsrdf:elementValue"/>
                  </sf>
                </case>
              </switch>
              <switch>
                <case test="$vAddEntryTag='700'">
                  <sf code="d" chopPunct="true" repeatable="false">
                    <select xpath="madsrdf:elementList/madsrdf:DateNameElement/madsrdf:elementValue"/>
                  </sf>
                </case>
              </switch>
              <switch>
                <case test="$vAddEntryTag='700'">
                  <sf code="q" chopPunct="true" repeatable="false"><select xpath="madsrdf:fullerName/*/rdfs:label"/></sf>
                </case>
              </switch>
              <switch>
                <case test="$vAddEntryTag='711'">
                  <sf code="q" chopPunct="true">
                    <select xpath="madsrdf:elementList/*[local-name()='NameElement' and position() &gt; 1]/madsrdf:elementValue"/>
                  </sf>
                </case>
              </switch>
            </case>
          </switch>
          <switch>
            <case test="$vAddEntryTag='711'">
              <sf code="j" chopPunct="true">
                <select xpath="../../bf:role/*[rdfs:label or madsrdf:authoritativeLabel]">
                  <switch>
                    <case test="madsrdf:authoritativeLabel"><select xpath="madsrdf:authoritativeLabel"/></case>
                    <case test="default"><select xpath="rdfs:label"/></case>
                  </switch>
                </select>
              </sf>
            </case>
            <case test="default">
              <sf code="e" chopPunct="true">
                <select xpath="../../bf:role/*[rdfs:label or madsrdf:authoritativeLabel]">
                  <switch>
                    <case test="madsrdf:authoritativeLabel"><select xpath="madsrdf:authoritativeLabel"/></case>
                    <case test="default"><select xpath="rdfs:label"/></case>
                  </switch>
                </select>
              </sf>
            </case>
          </switch>
          <!-- nac $u -->
          <sf code="4">
            <select xpath="../../bf:role/*[madsrdf:code or bf:code]">
              <switch>
                <case test="madsrdf:code">
                  <select xpath="madsrdf:code"/>
                </case>
                <case test="default"><select xpath="bf:code"/></case>
              </switch>
            </select>
          </sf>
          <sf code="4">
            <select xpath="../../bf:role/bf:Role/@rdf:about|../../bf:role/@rdf:resource"/>
          </sf>
          <sf code="0"><select xpath="@rdf:about[not(contains(.,'example.org')) and not(contains(.,'REPLACE'))]"/></sf>
          <sf code="0">
            <select xpath="bf:identifiedBy/bf:Identifier">
              <transform>
                <xsl:variable name="vIdType">
                  <xsl:call-template name="tChopPunct">
                    <xsl:with-param name="pString" select="bf:source/bf:Source/bf:code"/>
                  </xsl:call-template>
                </xsl:variable>
                <xsl:choose>
                  <xsl:when test="$vIdType != ''"><xsl:value-of select="concat('(',$vIdType,')',rdf:value)"/></xsl:when>
                  <xsl:otherwise><xsl:value-of select="rdf:value"/></xsl:otherwise>
                </xsl:choose>
              </transform>
            </select>
          </sf>

          <!-- title subfields -->
          <switch>
            <case test="exsl:node-set($vTitleResource)//marc:datafield[@tag=$vTitleTag]">
              <transform>
                <xsl:for-each select="exsl:node-set($vTitleResource)//marc:datafield[@tag=$vTitleTag]/marc:subfield[contains($vTitleSubfields,@code)]">
                  <marc:subfield>
                    <xsl:attribute name="code"><xsl:value-of select="@code"/></xsl:attribute>
                    <xsl:value-of select="."/>
                  </marc:subfield>
                </xsl:for-each>
              </transform>
            </case>
            <case test="default">
          <select xpath="ancestor::bf:Hub">
            <sf code="t" chopPunct="true" repeatable="false"><select xpath="bf:title/bf:Title/bf:mainTitle"/></sf>
            <sf code="d" chopPunct="true"><select xpath="bf:legalDate"/></sf>
            <sf code="f" chopPunct="true" repeatable="false"><select xpath="bf:originDate"/></sf>
            <sf code="m" chopPunct="true"><select xpath="bf:musicMedium/bf:MusicMedium/rdfs:label"/></sf>
            <sf code="n" chopPunct="true"><select xpath="bf:title/bf:Title[not(contains(rdf:type/@rdf:resource,'bibframe'))][1]/bf:partNumber"/></sf>
            <sf code="p" chopPunct="true"><select xpath="bf:title/bf:Title[not(contains(rdf:type/@rdf:resource,'bibframe'))][1]/bf:partName"/></sf>
            <sf code="r" chopPunct="true" repeatable="false"><select xpath="bf:musicKey"/></sf>
            <sf code="s" chopPunct="true"><select xpath="bf:version"/></sf>
          </select>
            </case>
          </switch>
            <select xpath="ancestor::bf:Hub">
            <sf code="x" repeatable="false" chopPunct="true"><select xpath="bf:identifier/*[local-name()=Issn or rdf:type/@rdf:resource='http://id.loc.gov/ontologies/bibframe/Issn']/rdf:value"/></sf>
            <sf code="0"><select xpath="@rdf:about[not(contains(.,'example.org')) and not(contains(.,'REPLACE'))]"/></sf>
            <sf code="0">
              <select xpath="bf:identifiedBy/bf:Identifier">
                <transform>
                  <xsl:variable name="vIdType">
                    <xsl:call-template name="tChopPunct">
                      <xsl:with-param name="pString" select="bf:source/bf:Source/bf:code"/>
                    </xsl:call-template>
                  </xsl:variable>
                  <xsl:choose>
                    <xsl:when test="$vIdType != ''"><xsl:value-of select="concat('(',$vIdType,')',rdf:value)"/></xsl:when>
                    <xsl:otherwise><xsl:value-of select="rdf:value"/></xsl:otherwise>
                  </xsl:choose>
                </transform>
              </select>
            </sf>
          </select>
          <switch>
            <case test="$vSourceUri != '' or bf:source/bf:Source/bf:code or bf:source/bf:Source/rdfs:label">
              <sf code="2">
                <switch>
                  <case test="bf:source/bf:Source/bf:code"><transform><xsl:value-of select="bf:source/bf:Source/bf:code"/></transform></case>
                  <case test="$vSourceUri != ''">
                    <switch>
                      <case test="contains($vSourceUri,'id.loc.gov')">
                        <transform>
                          <xsl:call-template name="tUriCode">
                            <xsl:with-param name="pUri" select="$vSourceUri"/>
                          </xsl:call-template>
                        </transform>
                      </case>
                      <case test="default"><transform><xsl:value-of select="$vSourceUri"/></transform></case>
                    </switch>
                  </case>
                  <case test="default"><transform><xsl:value-of select="bf:source/bf:Source/rdfs:label"/></transform></case>
                </switch>
              </sf>
            </case>
          </switch>
          <sf code="5" repeatable="false">
            <select xpath="../../bflc:applicableInstitution/*/bf:code"/>
          </sf>
        </case>
      </switch>
    </context>
  </df>

  <df tag="730" lang-xpath="rdfs:label" lang-prefer="transliterated">
    <context xpath="bf:Work/bf:relatedTo/bf:Hub[not(bf:contribution) and not(contains(@rdf:about, 'hubs')) and not(bflc:marcKey)] |
                    //bf:Item/bf:relatedTo/bf:Hub[not(bf:contribution) and not(contains(@rdf:about, 'hubs')) and not(bflc:marcKey)] |
                    bf:Work/bf:hasPart/bf:Hub[not(bf:contribution) and not(contains(@rdf:about, 'hubs')) and not(bflc:marcKey)] |
                    //bf:Item/bf:hasPart/bf:Hub[not(bf:contribution) and not(contains(@rdf:about, 'hubs')) and not(bflc:marcKey)]">
     
      <var name="vTitleResourcePreNS">
        <switch>
          <case test="bf:title/bf:Title/bflc:marcKey">
            <transform>
              <xsl:call-template name="tGetRelResource">
                <xsl:with-param name="pUri" select="@rdf:about"/>
                <xsl:with-param name="pContext" select="bf:title/bf:Title"/>
              </xsl:call-template>
            </transform>
          </case>
        </switch>
      </var>
      <var name="vTitleResource" xpath="exsl:node-set($vTitleResourcePreNS)" />
      
      <ind1 default="0">
        <switch>
          <case test="bf:title/bf:Title[not(contains(rdf:type/@rdf:resource,'bibframe'))][1]/bflc:nonSortNum">
            <transform>
              <xsl:value-of select="bf:title/bf:Title[not(contains(rdf:type/@rdf:resource,'bibframe'))][1]/bflc:nonSortNum"/>
            </transform>
          </case>
          <case test="bf:title/bf:Title[not(contains(rdf:type/@rdf:resource,'bibframe'))][1]/bflc:titleSortKey and (string-length(bf:title/bf:Title[not(contains(rdf:type/@rdf:resource,'bibframe'))][1]/bflc:titleSortKey) &lt; string-length(bf:title/bf:Title[not(contains(rdf:type/@rdf:resource,'bibframe'))][1]/bf:mainTitle))">
            <transform>
              <xsl:value-of select="string-length(bf:title/bf:Title[not(contains(rdf:type/@rdf:resource,'bibframe'))][1]/bf:mainTitle) - string-length(bf:title/bf:Title[not(contains(rdf:type/@rdf:resource,'bibframe'))][1]/bflc:titleSortKey)"/>
            </transform>
          </case>
        </switch>
      </ind1>
      <ind2 default=" ">
        <switch>
          <case test="local-name(parent::*)='hasPart'">2</case>
        </switch>
      </ind2>
      <sf code="3" chopPunct="true" repeatable="false">
        <select xpath="bflc:appliesTo/bflc:AppliesTo/rdfs:label"/>
      </sf>
      <!-- seem to have to hack this to get a match on @rdf:about attribute? -->
      <transform>
        <xsl:variable name="vNodeUri" select="@rdf:about"/>
        <xsl:for-each select="../../bflc:relationship/bflc:Relationship[bf:relatedTo/@rdf:resource=$vNodeUri or bf:relatedTo=$vNodeUri]/bflc:relation/bflc:Relation/rdfs:label">
          <marc:subfield code="i">
            <xsl:call-template name="tChopPunct">
              <xsl:with-param name="pString" select="."/>
            </xsl:call-template>
          </marc:subfield>
        </xsl:for-each>
      </transform>
      
      <!-- title subfields -->
      <switch>
        <case test="$vTitleResource//marc:datafield[@tag='130']">
          <transform>
            <xsl:for-each select="$vTitleResource//marc:datafield[@tag='130']/marc:subfield[contains('adfghklmnoprst',@code)]">
              <marc:subfield>
                <xsl:attribute name="code"><xsl:value-of select="@code"/></xsl:attribute>
                <xsl:value-of select="."/>
              </marc:subfield>
            </xsl:for-each>
          </transform>
        </case>
        <case test="default">
      <sf code="a" chopPunct="true" repeatable="false"><select xpath="bf:title/bf:Title/bf:mainTitle"/></sf>
      <sf code="d"><select xpath="bf:legalDate"/></sf>
      <sf code="f" repeatable="false"><select xpath="bf:originDate"/></sf>
      <sf code="m" chopPunct="true"><select xpath="bf:musicMedium/bf:MusicMedium/rdfs:label"/></sf>
      <sf code="n" chopPunct="true"><select xpath="bf:title/bf:Title/bf:partNumber"/></sf>
      <sf code="p" chopPunct="true"><select xpath="bf:title/bf:Title/bf:partName"/></sf>
      <switch>
        <case test="rdf:type/@rdf:resource='http://id.loc.gov/ontologies/bibframe/Arrangement'">
          <sf code="o">arranged</sf>
        </case>
      </switch>
      <sf code="r" chopPunct="true"><select xpath="bf:musicKey"/></sf>
      <sf code="s" chopPunct="true"><select xpath="bf:version"/></sf>
      <sf code="x" repeatable="false" chopPunct="true"><select xpath="bf:identifier/*[local-name()=Issn or rdf:type/@rdf:resource='http://id.loc.gov/ontologies/bibframe/Issn']/rdf:value"/></sf>
        </case>
      </switch>
 
      <sf code="2"><select xpath="bf:source/bf:Source/bf:code"/></sf>
      <sf code="0"><select xpath="@rdf:about[not(contains(.,'example.org')) and not(contains(.,'REPLACE'))]"/></sf>
      <sf code="0">
        <select xpath="bf:identifiedBy/bf:Identifier">
          <transform>
            <xsl:variable name="vIdType">
              <xsl:call-template name="tChopPunct">
                <xsl:with-param name="pString" select="bf:source/bf:Source/bf:code"/>
              </xsl:call-template>
            </xsl:variable>
            <xsl:choose>
              <xsl:when test="$vIdType != ''"><xsl:value-of select="concat('(',$vIdType,')',rdf:value)"/></xsl:when>
              <xsl:otherwise><xsl:value-of select="rdf:value"/></xsl:otherwise>
            </xsl:choose>
          </transform>
        </select>
      </sf>
      <sf code="5" repeatable="false">
        <select xpath="bflc:applicableInstitution/*/bf:code"/>
      </sf>
    </context>
  </df>

  <df tag="740">
    <context xpath="bf:Work/bf:relatedTo/bf:Work[rdf:type/@rdf:resource='http://id.loc.gov/ontologies/bflc/Uncontrolled'] |
                    bf:Work/bf:hasPart/bf:Work[rdf:type/@rdf:resource='http://id.loc.gov/ontologies/bflc/Uncontrolled']">
      <ind1 default="0"/>
      <ind2 default=' '>
        <switch>
          <case test="local-name(..)='hasPart'">2</case>
        </switch>
      </ind2>
      <sf code="a" repeatable="false"><select xpath="bf:title/bf:Title/bf:mainTitle"/></sf>
      <sf code="n"><select xpath="bf:partNumber"/></sf>
      <sf code="p"><select xpath="bf:partName"/></sf>
      <sf code="5" repeatable="false">
        <select xpath="bflc:applicableInstitution/*/bf:code"/>
      </sf>
    </context>
  </df>

  <df tag="752" lang-xpath="rdfs:label" lang-prefer="transliterated">
    <context xpath="bf:Work/bf:place/*[local-name()='HierarchicalGeographic' or rdf:type/@rdf:resource='http://www.loc.gov/mads/rdf/v1#HierarchicalGeographic']">
      <ind1 default=" "/>
      <ind2 default=" "/>
      <select xpath="madsrdf:componentList/*">
        <switch>
          <case test="local-name()='Country' or rdf:type[@rdf:resource='http://www.loc.gov/mads/rdf/v1#Country']">
            <sf code="a" chopPunct="true">
              <switch>
                <case test="madsrdf:authoritativeLabel"><select xpath="madsrdf:authoritativeLabel"/></case>
                <case test="default"><select xpath="rdfs:label"/></case>
              </switch>
            </sf>
          </case>
          <case test="local-name()='State' or rdf:type[@rdf:resource='http://www.loc.gov/mads/rdf/v1#State']">
            <sf code="b" chopPunct="true">
              <switch>
                <case test="madsrdf:authoritativeLabel"><select xpath="madsrdf:authoritativeLabel"/></case>
                <case test="default"><select xpath="rdfs:label"/></case>
              </switch>
            </sf>
          </case>
          <case test="local-name()='County' or rdf:type[@rdf:resource='http://www.loc.gov/mads/rdf/v1#County']">
            <sf code="c" chopPunct="true">
              <switch>
                <case test="madsrdf:authoritativeLabel"><select xpath="madsrdf:authoritativeLabel"/></case>
                <case test="default"><select xpath="rdfs:label"/></case>
              </switch>
            </sf>
          </case>
          <case test="local-name()='City' or rdf:type[@rdf:resource='http://www.loc.gov/mads/rdf/v1#City']">
            <sf code="d" chopPunct="true">
              <switch>
                <case test="madsrdf:authoritativeLabel"><select xpath="madsrdf:authoritativeLabel"/></case>
                <case test="default"><select xpath="rdfs:label"/></case>
              </switch>
            </sf>
          </case>
          <case test="local-name()='CitySection' or rdf:type[@rdf:resource='http://www.loc.gov/mads/rdf/v1#CitySection']">
            <sf code="f" chopPunct="true">
              <switch>
                <case test="madsrdf:authoritativeLabel"><select xpath="madsrdf:authoritativeLabel"/></case>
                <case test="default"><select xpath="rdfs:label"/></case>
              </switch>
            </sf>
          </case>
          <case test="local-name()='Region' or rdf:type[@rdf:resource='http://www.loc.gov/mads/rdf/v1#Region']">
            <sf code="g" chopPunct="true">
              <switch>
                <case test="madsrdf:authoritativeLabel"><select xpath="madsrdf:authoritativeLabel"/></case>
                <case test="default"><select xpath="rdfs:label"/></case>
              </switch>
            </sf>
          </case>
          <case test="local-name()='ExtraterrestrialArea' or rdf:type[@rdf:resource='http://www.loc.gov/mads/rdf/v1#ExtraterrestrialArea']">
            <sf code="h" chopPunct="true">
              <switch>
                <case test="madsrdf:authoritativeLabel"><select xpath="madsrdf:authoritativeLabel"/></case>
                <case test="default"><select xpath="rdfs:label"/></case>
              </switch>
            </sf>
          </case>
        </switch>
      </select>
      <sf code="0"><select xpath="@rdf:about[not(contains(.,'example.org')) and not(contains(.,'REPLACE'))]"/></sf>
      <sf code="0">
        <select xpath="bf:identifiedBy/bf:Identifier">
          <transform>
            <xsl:variable name="vIdType">
              <xsl:call-template name="tChopPunct">
                <xsl:with-param name="pString" select="bf:source/bf:Source/bf:code"/>
              </xsl:call-template>
            </xsl:variable>
            <xsl:choose>
              <xsl:when test="$vIdType != ''"><xsl:value-of select="concat('(',$vIdType,')',rdf:value)"/></xsl:when>
              <xsl:otherwise><xsl:value-of select="rdf:value"/></xsl:otherwise>
            </xsl:choose>
          </transform>
        </select>
      </sf>
      <sf code="e" chopPunct="true">
        <select xpath="bflc:relationship/bflc:Relationship/bflc:relation/*[rdfs:label or madsrdf:authoritativeLabel]">
          <switch>
            <case test="madsrdf:authoritativeLabel"><select xpath="madsrdf:authoritativeLabel"/></case>
            <case test="default"><select xpath="rdfs:label"/></case>
          </switch>
        </select>
      </sf>
      <sf code="4">
        <select xpath="bflc:relationship/bflc:Relationship/bflc:relation/*[madsrdf:code or bf:code]">
          <switch>
            <case test="madsrdf:code">
              <select xpath="madsrdf:code"/>
            </case>
            <case test="default"><select xpath="bf:code"/></case>
          </switch>
        </select>
      </sf>
      <sf code="4">
        <select xpath="bflc:relationship/bflc:Relationship/bflc:relation/*/@rdf:about|bflc:relationship/bflc:Relationship/bflc:relation/@rdf:resource"/>
      </sf>
      <sf code="2" repeatable="false">
        <select xpath="bf:source/bf:Source/bf:code|*/madsrdf:componentList/*[1]/bf:source/bf:Source/bf:code"/>
      </sf>
    </context>
  </df>

  <df tag="753" lang-xpath="rdfs:label">
    <context xpath="bf:Instance/bf:systemRequirement/*[
                    local-name() = 'MachineModel' or rdf:type/@rdf:resource='http://id.loc.gov/ontologies/bflc/MachineModel' or
                    local-name() = 'ProgrammingLanguage' or rdf:type/@rdf:resource='http://id.loc.gov/ontologies/bflc/ProgrammingLanguage' or
                    local-name() = 'OperatingSystem' or rdf:type/@rdf:resource='http://id.loc.gov/ontologies/bflc/OperatingSystem']">
      <ind1 default=" "/>
      <ind2 default=" "/>
      <switch>
        <case test="local-name() = 'MachineModel' or rdf:type/@rdf:resource='http://id.loc.gov/ontologies/bflc/MachineModel'">
          <sf code="a" chopPunct="true"><select xpath="rdfs:label"/></sf>
        </case>
        <case test="local-name() = 'ProgrammingLanguage' or rdf:type/@rdf:resource='http://id.loc.gov/ontologies/bflc/ProgrammingLanguage'">
          <sf code="b" chopPunct="true"><select xpath="rdfs:label"/></sf>
        </case>
        <case test="local-name() = 'OperatingSystem' or rdf:type/@rdf:resource='http://id.loc.gov/ontologies/bflc/OperatingSystem'">
          <sf code="c" chopPunct="true"><select xpath="rdfs:label"/></sf>
        </case>
      </switch>
      <sf code="0"><select xpath="@rdf:about[not(contains(.,'example.org')) and not(contains(.,'REPLACE'))]"/></sf>
      <sf code="0">
        <select xpath="bf:identifiedBy/bf:Identifier">
          <transform>
            <xsl:variable name="vIdType">
              <xsl:call-template name="tChopPunct">
                <xsl:with-param name="pString" select="bf:source/bf:Source/bf:code"/>
              </xsl:call-template>
            </xsl:variable>
            <xsl:choose>
              <xsl:when test="$vIdType != ''"><xsl:value-of select="concat('(',$vIdType,')',rdf:value)"/></xsl:when>
              <xsl:otherwise><xsl:value-of select="rdf:value"/></xsl:otherwise>
            </xsl:choose>
          </transform>
        </select>
      </sf>
      <sf code="2" chopPunct="true" repeatable="false">
        <select xpath="bf:source/bf:Source/bf:code"/>
      </sf>
    </context>
  </df>

  <!-- Linking entries -->
  <df tag="$vLinkTagFromWork" lang-xpath="rdfs:label">
    <context xpath="bf:Work/bf:hasSeries/bf:Work[bf:hasInstance] |
                    bf:Work/bf:hasSubseries/bf:Work[bf:hasInstance] |
                    bf:Work/bf:translationOf/bf:Work[bf:hasInstance] |
                    bf:Work/bf:translation/bf:Work[bf:hasInstance] |
                    bf:Work/bf:supplement/bf:Work[bf:hasInstance] |
                    bf:Work/bf:supplementTo/bf:Work[bf:hasInstance] |
                    bf:Work/bf:partOf/bf:Work[bf:hasInstance] |
                    bf:Work/bf:hasPart/bf:Work[bf:hasInstance] |
                    bf:Work/bf:otherEdition/bf:Work[bf:hasInstance] |
                    bf:Work/bf:otherPhysicalFormat/bf:Work[bf:hasInstance] |
                    bf:Work/bf:issuedWith/bf:Work[bf:hasInstance] |
                    bf:Work/bf:continues/bf:Work[bf:hasInstance] |
                    bf:Work/bf:continuesInPart/bf:Work[bf:hasInstance] |
                    bf:Work/bf:precededBy/bf:Work[bf:hasInstance] |
                    bf:Work/bf:mergerOf/bf:Work[bf:hasInstance] |
                    bf:Work/bf:absorbed/bf:Work[bf:hasInstance] |
                    bf:Work/bf:separatedBy/bf:Work[bf:hasInstance] |
                    bf:Work/bf:continuedBy/bf:Work[bf:hasInstance] |
                    bf:Work/bf:continuedInPartBy/bf:Work[bf:hasInstance] |
                    bf:Work/bf:succeededFrom/bf:Work[bf:hasInstance] |
                    bf:Work/bf:absorbedBy/bf:Work[bf:hasInstance] |
                    bf:Work/bf:splitInto/bf:Work[bf:hasInstance] |
                    bf:Work/bf:mergedToForm/bf:Work[bf:hasInstance] |
                    bf:Work/bf:dataSource/bf:Work[bf:hasInstance] |
                    bf:Work/bf:relatedTo/bf:Work[bf:hasInstance]">
      <var name="vLinkTagFromWork">
        <switch>
          <case test="local-name(..)='hasSeries'">760</case>
          <case test="local-name(..)='hasSubseries'">762</case>
          <case test="local-name(..)='translationOf'">765</case>
          <case test="local-name(..)='translation'">767</case>
          <case test="local-name(..)='supplement'">770</case>
          <case test="local-name(..)='supplementTo'">772</case>
          <case test="local-name(..)='partOf'">773</case>
          <case test="local-name(..)='hasPart'">774</case>
          <case test="local-name(..)='otherEdition'">775</case>
          <case test="local-name(..)='otherPhysicalFormat'">776</case>
          <case test="local-name(..)='issuedWith'">777</case>
          <case test="local-name(..)='continues'">780</case>
          <case test="local-name(..)='continuesInPart'">780</case>
          <case test="local-name(..)='precededBy'">780</case>
          <case test="local-name(..)='mergerOf'">780</case>
          <case test="local-name(..)='absorbed'">780</case>
          <case test="local-name(..)='separatedFrom'">780</case>
          <case test="local-name(..)='continuedBy'">785</case>
          <case test="local-name(..)='continuedInPartBy'">785</case>
          <case test="local-name(..)='succeededBy'">785</case>
          <case test="local-name(..)='absorbedBy'">785</case>
          <case test="local-name(..)='splitInto'">785</case>
          <case test="local-name(..)='mergedToForm'">785</case>
          <case test="local-name(..)='dataSource'">786</case>
          <case test="default">787</case>
        </switch>
      </var>
      <var name="vLanguageUri">
        <switch>
          <case test="bf:language/@rdf:resource"><transform><xsl:value-of select="bf:language/@rdf:resource"/></transform></case>
          <case test="bf:language/*/@rdf:about"><transform><xsl:value-of select="bf:language/*/@rdf:about"/></transform></case>
        </switch>
      </var>
      <var name="vPlaceUri">
        <switch>
          <case test="bf:hasInstance/bf:Instance/bf:provisionActivity/bf:ProvisionActivity/bf:place/@rdf:resource"><transform><xsl:value-of select="bf:hasInstance/bf:Instance/bf:provisionActivity/bf:ProvisionActivity/bf:place/@rdf:resource"/></transform></case>
          <case test="bf:hasInstance/bf:Instance/bf:provisionActivity/bf:ProvisionActivity/bf:place/*/@rdf:about"><transform><xsl:value-of select="bf:hasInstance/bf:Instance/bf:provisionActivity/bf:ProvisionActivity/bf:place/*/@rdf:about"/></transform></case>
        </switch>
      </var>
      <ind1 default="0"/>
      <ind2 default=" ">
        <switch>
          <case test="local-name(parent::*)='continues'">0</case>
          <case test="local-name(parent::*)='continuesInPart'">1</case>
          <case test="local-name(parent::*)='precededBy'">2</case>
          <case test="local-name(parent::*)='mergerOf'">4</case>
          <case test="local-name(parent::*)='absorbed'">5</case>
          <case test="local-name(parent::*)='separatedFrom'">7</case>
          <case test="local-name(parent::*)='continuedBy'">0</case>
          <case test="local-name(parent::*)='continuedInPartBy'">1</case>
          <case test="local-name(parent::*)='succeededBy'">2</case>
          <case test="local-name(parent::*)='absorbedBy'">4</case>
          <case test="local-name(parent::*)='splitInto'">5</case>
          <case test="local-name(parent::*)='mergedToForm'">7</case>
        </switch>
      </ind2>
      <sf code="3" chopPunct="true" repeatable="false">
        <select xpath="bflc:appliesTo/bflc:AppliesTo/rdfs:label"/>
      </sf>
      <sf code="a" chopPunct="true" repeatable="false">
        <select xpath="bf:contribution/*[local-name()='PrimaryContribution' or rdf:type[contains(@rdf:resource, '/PrimaryContribution')]]/bf:agent/*/rdfs:label"/>
      </sf>
      <sf code="b" chopPunct="true" repeatable="false">
        <select xpath="bf:hasInstance/bf:Instance/bf:editionStatement"/>
      </sf>
      <sf code="c" chopPunct="true" repeatable="false">
        <select xpath="bf:title/bf:Title/bf:qualifier"/>
      </sf>
      <sf code="d" chopPunct="true" repeatable="false">
        <select xpath="bf:hasInstance/bf:Instance/bf:provisionActivityStatement"/>
      </sf>
      <switch>
        <case test="$vLanguageUri != '' or bf:language/*[local-name()='code']">
          <sf code="e">
            <switch>
              <case test="bf:language/*[local-name()='code']"><transform><xsl:value-of select="bf:language/*[local-name()='code']"/></transform></case>
              <case test="$vLanguageUri != ''">
                <switch>
                  <case test="contains($vLanguageUri,'id.loc.gov')">
                    <transform>
                      <xsl:call-template name="tUriCode">
                        <xsl:with-param name="pUri" select="$vLanguageUri"/>
                      </xsl:call-template>
                    </transform>
                  </case>
                  <case test="default"><transform><xsl:value-of select="$vLanguageUri"/></transform></case>
                </switch>
              </case>
            </switch>
          </sf>
        </case>
      </switch>
      <switch>
        <case test="$vPlaceUri != '' or bf:hasInstance/bf:Instance/bf:provisionActivity/bf:ProvisionActivity/bf:place/*[local-name()='code']">
          <sf code="f">
            <switch>
              <case test="bf:hasInstance/bf:Instance/bf:provisionActivity/bf:ProvisionActivity/bf:place/*[local-name()='code']"><transform><xsl:value-of select="bf:hasInstance/bf:Instance/bf:provisionActivity/bf:ProvisionActivity/bf:place/*[local-name()='code']"/></transform></case>
              <case test="$vPlaceUri != ''">
                <switch>
                  <case test="contains($vPlaceUri,'id.loc.gov')">
                    <transform>
                      <xsl:call-template name="tUriCode">
                        <xsl:with-param name="pUri" select="$vPlaceUri"/>
                      </xsl:call-template>
                    </transform>
                  </case>
                  <case test="default"><transform><xsl:value-of select="$vPlaceUri"/></transform></case>
                </switch>
              </case>
            </switch>
          </sf>
        </case>
      </switch>
      <sf code="g" chopPunct="true">
        <select xpath="bf:hasInstance/bf:Instance/bf:part"/>
      </sf>
      <sf code="h" chopPunct="true" repeatable="false">
        <select xpath="bf:hasInstance/bf:Instance/bf:extent/bf:Extent/rdfs:label"/>
      </sf>
      <sf code="i" chopPunct="true">
        <select xpath="bflc:relationship/bflc:Relationship/bflc:relation/*[rdfs:label or madsrdf:authoritativeLabel]">
          <switch>
            <case test="madsrdf:authoritativeLabel"><select xpath="madsrdf:authoritativeLabel"/></case>
            <case test="default"><select xpath="rdfs:label"/></case>
          </switch>
        </select>
      </sf>
      <sf code="4">
        <select xpath="bflc:relationship/bflc:Relationship/bflc:relation/*[madsrdf:code or bf:code]">
          <switch>
            <case test="madsrdf:code">
              <select xpath="madsrdf:code"/>
            </case>
            <case test="default"><select xpath="bf:code"/></case>
          </switch>
        </select>
      </sf>
      <sf code="4">
        <select xpath="bflc:relationship/bflc:Relationship/bflc:relation/*/@rdf:about|bflc:relationship/bflc:Relationship/bflc:relation/@rdf:resource"/>
      </sf>
      <sf code="k" chopPunct="true">
        <select xpath="bf:hasInstance/bf:Instance/bf:seriesStatement"/>
      </sf>
      <sf code="n" chopPunct="true">
        <select xpath="bf:note/bf:Note/rdfs:label|bf:hasInstance/bf:Instance/bf:note/bf:Note/rdfs:label"/>
      </sf>
      <sf code="p" chopPunct="true" repeatable="false">
        <select xpath="bf:title/*[local-name()='AbbreviatedTitle' or rdf:type/@rdf:resource='http://id.loc.gov/ontologies/bibframe/AbbreviatedTitle']/mainTitle"/>
      </sf>
      <switch>
        <case test="bf:title/bf:Title/bf:mainTitle != bf:hasInstance/bf:Instance/bf:title/bf:Title/bf:mainTitle">
          <sf code="s" chopPunct="true" repeatable="false"><select xpath="bf:title/bf:Title/bf:mainTitle"/></sf>
        </case>
      </switch>
      <sf code="t" chopPunct="true" repeatable="false">
        <switch>
          <case test="bf:hasInstance/bf:Instance/bf:title/bf:Title/bf:mainTitle">
            <select xpath="bf:hasInstance/bf:Instance/bf:title/bf:Title/bf:mainTitle"/>            
          </case>
          <case test="bf:title/bf:Title/bf:mainTitle">
            <select xpath="bf:title/bf:Title/bf:mainTitle"/>
          </case>
        </switch>
      </sf>
      <sf code="x" chopPunct="true" repeatable="false">
        <select xpath="bf:identifiedBy/*[local-name()='Issn' or rdf:type/@rdf:resource='http://id.loc.gov/ontologies/bibframe/Issn']/rdf:value"/>
      </sf>
      <select xpath="bf:hasInstance/bf:Instance/bf:identifiedBy/*">
        <switch>
          <case test="local-name()='Local' or rdf:type/@rdf:resource='http://id.loc.gov/ontologies/bibframe/Local'">
            <sf code="o"><select xpath="rdf:value"/></sf>
          </case>
          <case test="local-name()='ReportNumber' or rdf:type/@rdf:resource='http://id.loc.gov/ontologies/bibframe/ReportNumber'">
            <sf code="r"><select xpath="rdf:value"/></sf>
          </case>
          <case test="local-name()='Strn' or rdf:type/@rdf:resource='http://id.loc.gov/ontologies/bibframe/Strn'">
            <sf code="u"><select xpath="rdf:value"/></sf>
          </case>
          <case test="local-name()='Lccn' or rdf:type/@rdf:resource='http://id.loc.gov/ontologies/bibframe/Lccn'">
            <sf code="w">
              <transform><xsl:value-of select="concat('(DLC)',rdf:value)"/></transform>
            </sf>
          </case>
          <case test="local-name()='Coden' or rdf:type/@rdf:resource='http://id.loc.gov/ontologies/bibframe/Coden'">
            <sf code="y"><select xpath="rdf:value"/></sf>
          </case>
          <case test="local-name()='Isbn' or rdf:type/@rdf:resource='http://id.loc.gov/ontologies/bibframe/Isbn'">
            <sf code="z"><select xpath="rdf:value"/></sf>
          </case>
          <case test="default">
            <sf code="w">
              <switch>
                <case test="bf:assigner/bf:Agent/bf:code">
                  <transform>
                    <xsl:variable name="vSource">
                      <xsl:call-template name="tChopPunct">
                        <xsl:with-param name="pString" select="bf:assigner/bf:Agent/bf:code"/>
                      </xsl:call-template>
                    </xsl:variable>
                    <xsl:value-of select="concat('(',$vSource,')',rdf:value)"/></transform>
                </case>
                <case test="default">
                  <select xpath="rdf:value"/>
                </case>
              </switch>
            </sf>
          </case>
        </switch>
      </select>
    </context>
  </df>

</rules>
